
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Wed Jun 26 08:05:38 GMT 2002
//----------------------------------------------------

package slime.sfcparser;

import java_cup.runtime.*;
import java_cup.*;
import java.io.*;
import java.util.*;
import java.lang.String;

/** CUP v0.10j generated parser.
  * @version Wed Jun 26 08:05:38 GMT 2002
  */
public class SFCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SFCParser() {super();}

  /** Constructor which sets the default scanner. */
  public SFCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\006\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\015\005\000\002\015\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\022\007\000" +
    "\002\023\011\000\002\024\007\000\002\034\002\000\002" +
    "\025\012\000\002\021\011\000\002\020\011\000\002\030" +
    "\003\000\002\016\006\000\002\017\005\000\002\017\007" +
    "\000\002\026\006\000\002\027\006\000\002\033\003\000" +
    "\002\033\004\000\002\032\003\000\002\032\004\000\002" +
    "\031\005\000\002\011\003\000\002\011\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\050\004\023\005\020\006\033\007\022\011" +
    "\005\012\010\013\011\014\014\022\006\023\015\024\026" +
    "\025\004\026\025\027\034\036\013\037\024\052\032\062" +
    "\012\063\027\001\002\000\046\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\036\uffcd\037\uffcd" +
    "\062\uffcd\063\uffcd\001\002\000\046\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\036\uffd4\037" +
    "\uffd4\062\uffd4\063\uffd4\001\002\000\046\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\036\uffd0" +
    "\037\uffd0\062\uffd0\063\uffd0\001\002\000\036\002\uffff\004" +
    "\023\005\020\006\033\007\022\011\005\012\010\013\011" +
    "\022\006\023\015\024\026\025\004\026\025\027\034\001" +
    "\002\000\046\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\036\uffd3\037\uffd3\062\uffd3\063\uffd3" +
    "\001\002\000\046\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\036\uffd2\037\uffd2\062\uffd2\063" +
    "\uffd2\001\002\000\042\002\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\035\uffc8\001\002" +
    "\000\042\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\015\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\035\uffcb\001\002\000\046\004" +
    "\023\005\020\006\033\007\022\011\005\012\010\013\011" +
    "\014\014\022\006\023\015\024\026\025\004\026\025\027" +
    "\034\036\013\037\024\062\012\063\027\001\002\000\046" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\036\uffcf\037\uffcf\062\uffcf\063\uffcf\001\002\000" +
    "\046\004\023\005\020\006\033\007\022\011\005\012\010" +
    "\013\011\014\014\022\006\023\015\024\026\025\004\026" +
    "\025\027\034\036\013\037\024\062\012\063\027\001\002" +
    "\000\004\002\001\001\002\000\046\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\036\uffd6\037" +
    "\uffd6\062\uffd6\063\uffd6\001\002\000\042\002\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\015" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\035\uffc6\001\002\000\046\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\036\uffd5\037\uffd5\062" +
    "\uffd5\063\uffd5\001\002\000\046\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\036\uffd8\037\uffd8" +
    "\062\uffd8\063\uffd8\001\002\000\042\002\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013\uffca\015\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\035" +
    "\uffca\001\002\000\046\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\036\uffd1\037\uffd1\062\uffd1" +
    "\063\uffd1\001\002\000\046\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\036\uffce\037\uffce\062" +
    "\uffce\063\uffce\001\002\000\042\002\uffc9\004\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\035\uffc9" +
    "\001\002\000\004\002\162\001\002\000\042\002\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\015\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\035\uffc7\001\002\000\004\062\035\001\002\000\046" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\036\uffd7\037\uffd7\062\uffd7\063\uffd7\001\002\000" +
    "\046\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\036\uffcc\037\uffcc\062\uffcc\063\uffcc\001\002" +
    "\000\004\020\037\001\002\000\004\002\ufffe\001\002\000" +
    "\034\020\037\021\043\040\041\041\064\046\047\047\071" +
    "\051\057\053\052\055\045\056\042\057\066\060\070\062" +
    "\051\001\002\000\034\020\ufff0\021\ufff0\040\ufff0\041\ufff0" +
    "\046\ufff0\047\ufff0\051\ufff0\053\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\062\ufff0\001\002\000\004\062\uffda\001\002" +
    "\000\004\014\154\001\002\000\044\002\ufff9\020\ufff9\021" +
    "\ufff9\040\ufff9\041\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\062\ufff9\001\002\000\034\020\ufff8\021\ufff8\040\ufff8" +
    "\041\ufff8\046\ufff8\047\ufff8\051\ufff8\053\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\062\ufff8\001\002\000\004\014\150" +
    "\001\002\000\034\020\ufff5\021\ufff5\040\ufff5\041\ufff5\046" +
    "\ufff5\047\ufff5\051\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\062\ufff5\001\002\000\004\020\140\001\002\000" +
    "\004\062\133\001\002\000\004\044\130\001\002\000\004" +
    "\014\122\001\002\000\004\021\ufffc\001\002\000\034\020" +
    "\uffed\021\uffed\040\uffed\041\uffed\046\uffed\047\uffed\051\uffed" +
    "\053\uffed\055\uffed\056\uffed\057\uffed\060\uffed\062\uffed\001" +
    "\002\000\034\020\ufff2\021\ufff2\040\ufff2\041\ufff2\046\ufff2" +
    "\047\ufff2\051\ufff2\053\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\062\ufff2\001\002\000\034\020\ufff3\021\ufff3\040\ufff3" +
    "\041\ufff3\046\ufff3\047\ufff3\051\ufff3\053\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\062\ufff3\001\002\000\034\020\uffe5" +
    "\021\uffe5\040\uffe5\041\uffe5\046\uffe5\047\uffe5\051\uffe5\053" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\062\uffe5\001\002" +
    "\000\034\020\ufff7\021\ufff7\040\ufff7\041\ufff7\046\ufff7\047" +
    "\ufff7\051\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\062\ufff7\001\002\000\034\020\uffee\021\uffee\040\uffee\041" +
    "\uffee\046\uffee\047\uffee\051\uffee\053\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\062\uffee\001\002\000\034\020\uffef\021" +
    "\uffef\040\uffef\041\uffef\046\uffef\047\uffef\051\uffef\053\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\062\uffef\001\002\000" +
    "\004\021\121\001\002\000\004\062\uffd9\001\002\000\034" +
    "\020\ufff6\021\ufff6\040\ufff6\041\ufff6\046\ufff6\047\ufff6\051" +
    "\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\062\ufff6" +
    "\001\002\000\004\014\113\001\002\000\034\020\ufff4\021" +
    "\ufff4\040\ufff4\041\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4\001\002\000" +
    "\004\020\037\001\002\000\004\014\075\001\002\000\034" +
    "\020\ufff1\021\ufff1\040\ufff1\041\ufff1\046\ufff1\047\ufff1\051" +
    "\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\062\ufff1" +
    "\001\002\000\034\020\037\021\ufffd\040\041\041\064\046" +
    "\047\047\071\051\057\053\052\055\045\056\042\057\066" +
    "\060\070\062\051\001\002\000\004\021\ufffb\001\002\000" +
    "\004\062\076\001\002\000\006\015\uffdf\062\076\001\002" +
    "\000\004\015\100\001\002\000\034\020\uffe0\021\uffe0\040" +
    "\uffe0\041\uffe0\046\uffe0\047\uffe0\051\uffe0\053\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\062\uffe0\001\002\000\004\015" +
    "\uffde\001\002\000\004\061\103\001\002\000\004\014\104" +
    "\001\002\000\046\004\023\005\020\006\033\007\022\011" +
    "\005\012\010\013\011\014\014\022\006\023\015\024\026" +
    "\025\004\026\025\027\034\036\013\037\024\062\012\063" +
    "\027\001\002\000\036\004\023\005\020\006\033\007\022" +
    "\011\005\012\010\013\011\015\107\022\006\023\015\024" +
    "\026\025\004\026\025\027\034\001\002\000\046\004\023" +
    "\005\020\006\033\007\022\011\005\012\010\013\011\014" +
    "\014\022\006\023\015\024\026\025\004\026\025\027\034" +
    "\036\013\037\024\062\012\063\027\001\002\000\004\035" +
    "\uffe9\001\002\000\004\035\111\001\002\000\034\020\uffe8" +
    "\021\uffe8\040\uffe8\041\uffe8\046\uffe8\047\uffe8\051\uffe8\053" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\001\002" +
    "\000\042\002\uffc4\004\023\005\020\006\033\007\022\011" +
    "\005\012\010\013\011\015\uffc4\022\006\023\015\024\026" +
    "\025\004\026\025\027\034\035\uffc4\001\002\000\004\062" +
    "\114\001\002\000\004\034\115\001\002\000\046\004\023" +
    "\005\020\006\033\007\022\011\005\012\010\013\011\014" +
    "\014\022\006\023\015\024\026\025\004\026\025\027\034" +
    "\036\013\037\024\062\012\063\027\001\002\000\036\004" +
    "\023\005\020\006\033\007\022\011\005\012\010\013\011" +
    "\015\117\022\006\023\015\024\026\025\004\026\025\027" +
    "\034\001\002\000\004\035\120\001\002\000\034\020\uffe7" +
    "\021\uffe7\040\uffe7\041\uffe7\046\uffe7\047\uffe7\051\uffe7\053" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\001\002" +
    "\000\044\002\ufffa\020\ufffa\021\ufffa\040\ufffa\041\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000" +
    "\046\004\023\005\020\006\033\007\022\011\005\012\010" +
    "\013\011\014\014\022\006\023\015\024\026\025\004\026" +
    "\025\027\034\036\013\037\024\062\012\063\027\001\002" +
    "\000\036\004\023\005\020\006\033\007\022\011\005\012" +
    "\010\013\011\015\124\022\006\023\015\024\026\025\004" +
    "\026\025\027\034\001\002\000\004\020\037\001\002\000" +
    "\036\020\uffec\021\uffec\040\uffec\041\uffec\046\uffec\047\uffec" +
    "\051\uffec\053\uffec\054\126\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\062\uffec\001\002\000\004\020\037\001\002\000\034" +
    "\020\uffeb\021\uffeb\040\uffeb\041\uffeb\046\uffeb\047\uffeb\051" +
    "\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\062\uffeb" +
    "\001\002\000\046\004\023\005\020\006\033\007\022\011" +
    "\005\012\010\013\011\014\014\022\006\023\015\024\026" +
    "\025\004\026\025\027\034\036\013\037\024\062\012\063" +
    "\027\001\002\000\036\004\023\005\020\006\033\007\022" +
    "\011\005\012\010\013\011\022\006\023\015\024\026\025" +
    "\004\026\025\027\034\035\132\001\002\000\034\020\uffe4" +
    "\021\uffe4\040\uffe4\041\uffe4\046\uffe4\047\uffe4\051\uffe4\053" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\062\uffe4\001\002" +
    "\000\006\035\134\044\135\001\002\000\034\020\uffe3\021" +
    "\uffe3\040\uffe3\041\uffe3\046\uffe3\047\uffe3\051\uffe3\053\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062\uffe3\001\002\000" +
    "\046\004\023\005\020\006\033\007\022\011\005\012\010" +
    "\013\011\014\014\022\006\023\015\024\026\025\004\026" +
    "\025\027\034\036\013\037\024\062\012\063\027\001\002" +
    "\000\036\004\023\005\020\006\033\007\022\011\005\012" +
    "\010\013\011\022\006\023\015\024\026\025\004\026\025" +
    "\027\034\035\137\001\002\000\034\020\uffe2\021\uffe2\040" +
    "\uffe2\041\uffe2\046\uffe2\047\uffe2\051\uffe2\053\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\062\uffe2\001\002\000\004\050" +
    "\142\001\002\000\004\021\147\001\002\000\004\062\145" +
    "\001\002\000\006\021\uffdd\050\142\001\002\000\004\021" +
    "\uffdc\001\002\000\004\020\037\001\002\000\006\021\uffdb" +
    "\050\uffdb\001\002\000\034\020\uffe1\021\uffe1\040\uffe1\041" +
    "\uffe1\046\uffe1\047\uffe1\051\uffe1\053\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\062\uffe1\001\002\000\046\004\023\005" +
    "\020\006\033\007\022\011\005\012\010\013\011\014\014" +
    "\022\006\023\015\024\026\025\004\026\025\027\034\036" +
    "\013\037\024\062\012\063\027\001\002\000\036\004\023" +
    "\005\020\006\033\007\022\011\005\012\010\013\011\015" +
    "\152\022\006\023\015\024\026\025\004\026\025\027\034" +
    "\001\002\000\004\020\037\001\002\000\034\020\uffea\021" +
    "\uffea\040\uffea\041\uffea\046\uffea\047\uffea\051\uffea\053\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\062\uffea\001\002\000" +
    "\004\062\155\001\002\000\004\034\156\001\002\000\046" +
    "\004\023\005\020\006\033\007\022\011\005\012\010\013" +
    "\011\014\014\022\006\023\015\024\026\025\004\026\025" +
    "\027\034\036\013\037\024\062\012\063\027\001\002\000" +
    "\036\004\023\005\020\006\033\007\022\011\005\012\010" +
    "\013\011\015\160\022\006\023\015\024\026\025\004\026" +
    "\025\027\034\001\002\000\004\035\161\001\002\000\034" +
    "\020\uffe6\021\uffe6\040\uffe6\041\uffe6\046\uffe6\047\uffe6\051" +
    "\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6" +
    "\001\002\000\004\002\000\001\002\000\042\002\uffc5\004" +
    "\023\005\020\006\033\007\022\011\005\012\010\013\011" +
    "\015\uffc5\022\006\023\015\024\026\025\004\026\025\027" +
    "\034\035\uffc5\001\002\000\036\004\023\005\020\006\033" +
    "\007\022\011\005\012\010\013\011\015\165\022\006\023" +
    "\015\024\026\025\004\026\025\027\034\001\002\000\042" +
    "\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\015\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\035\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\016\003\027\006\016\007\006\010\030\012" +
    "\020\013\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\163\010\030\012\020\013\015\001\001\000" +
    "\002\001\001\000\012\007\162\010\030\012\020\013\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\035\001\001\000" +
    "\002\001\001\000\042\004\072\005\043\011\047\014\062" +
    "\015\052\016\061\017\037\020\053\021\060\022\057\023" +
    "\064\024\045\025\066\026\055\027\054\030\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\072\005\043\011" +
    "\047\014\073\015\052\016\061\017\037\020\053\021\060" +
    "\022\057\023\064\024\045\025\066\026\055\027\054\030" +
    "\071\001\001\000\002\001\001\000\004\033\076\001\001" +
    "\000\004\033\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\104\010\030\012\020\013\015\001\001\000" +
    "\004\013\105\001\001\000\012\007\111\010\030\012\020" +
    "\013\015\001\001\000\004\034\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\115\010\030\012" +
    "\020\013\015\001\001\000\004\013\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\122\010\030\012\020\013\015\001\001\000\004\013\105" +
    "\001\001\000\004\015\124\001\001\000\002\001\001\000" +
    "\004\015\126\001\001\000\002\001\001\000\012\007\130" +
    "\010\030\012\020\013\015\001\001\000\004\013\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\135\010\030\012\020\013\015\001\001\000" +
    "\004\013\105\001\001\000\002\001\001\000\006\031\142" +
    "\032\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\142\032\143\001\001\000\002\001\001\000\004" +
    "\015\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\150\010\030\012\020\013\015\001\001\000\004" +
    "\013\105\001\001\000\004\015\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\156" +
    "\010\030\012\020\013\015\001\001\000\004\013\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\105\001\001\000\004\013\105\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SFCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SFCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SFCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    SFCLex lexer;

/**
 * <b>CUP: report_fatal_error</b><br>
 * This method should be called whenever a non-recoverable error<br>
 * occurs. It responds by calling report_error(), then aborts<br>
 * parsing by calling the parser method done_parsing(), and<br>
 * finally throws an exception. (In general done_parsing() should<br>
 * be called at any point that parsing needs to be terminated early).<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void report_fatal_error(String message, Object info) throws SFCParseException {
  System.err.println( message );
  throw new SFCParseException( message );
  } // end of report_fatal_error
*/

/**
 * <b>CUP: report_error</b><br>
 * This method should be called whenever an error message is to be<br>
 * issued. In the default implementation of this method, the first<br>
 * parameter provides the text of a message which is printed on<br>
 * System.err and the second parameter is simply ignored. It is<br>
 * very typical to override this method in order to provide a more<br>
 * sophisticated error reporting mechanism.<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void report_error(String message, Object info) {
  System.err.println( "SFC Parser: " + message );
  } // end of report_error 
*/  

/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser as soon as a syntax error<br>
 * is detected (but before error recovery is attempted). In the<br>
 * default implementation it calls: report_error("Syntax error", null);<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void syntax_error(Symbol cur_token) {
  report_error("SFC Parser : SYNTAX ERROR - current symbol: " + cur_token, null );
  } // end of syntax_error
*/
  
/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser if it is unable to recover
 * from a syntax error. In the default implementation it calls:
 * report_fatal_error("Couldn't repair and continue parse", null);
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void unrecovered_syntax_error(Symbol cur_token) throws SFCParseException {
  done_parsing();       
  report_fatal_error("SFC Parser : FATAL PARSING ERROR", null);
  } // end of unrecovered_syntax_error
*/

/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser to determine how many<br>
 * tokens it must successfully parse in order to consider an error<br>
 * recovery successful. The default implementation returns 3.<br>
 * Values below 2 are not recommended. See the section on<br>
 * error recovery for details.<br>
 * @return 3 <b>the standard size</b>
 **/ 
/*
  protected int error_sync_size() {
  return 3;
  } // end of error_sync_size
*/

/** 
 * <b> parseFile </b>
 * @param java.io.File sourcefile - file to parse
 * @return abstract syntax tree with slime.absynt.sfc as root
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.absfc.SFCabtree parseFile(java.io.File sfcfile) throws Exception { // slime.sfcparser.SFCParseException {
	boolean doDebugParse = true;
	FileInputStream FIS = null;
	// Process of parsing a file:
	// create a parsing object
	// SFCParser mySFCParserObj = new SFCParser();
	// open input files, etc. here
	// Symbol myParseTree = null;
  
	// Initialize the Abstract Syntax Tree for the Sequential Function Chart
	slime.absynt.absfc.SFCabtree sfc2 = null;

	try {
	    FIS = new FileInputStream( sfcfile );
	    lexer   = new SFCLex( FIS );
	    setScanner( lexer );
	    if (doDebugParse) {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value;
	    } else {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value; 
	    } // end of if-doDebugParse
	} catch (IOException ioe) {
	  throw ioe;
	} catch (Exception e) {
	    throw e;
	} finally {
	    FIS.close();
	} // end of try-catch
	return sfc2;      
    } // end of parseFile


/** 
 * <b> parseExpression </b>
 * @param java.lang.String sfcexpr - Expression to parse <br>
 * @return slime.absynt.Expr - abstract syntax expression <br>
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.Expr parseExpression(java.lang.String sfcexpr) throws SFCParseException {
	slime.absynt.Expr expr = null;
	try {
	    lexer = new SFCLex( new StringReader( sfcexpr ) );
	    setScanner(lexer);
	    expr = (slime.absynt.Expr)parse().value;
	} catch (Exception le) {
	    System.out.println("Error parsing expression");
	} // end try catch
	return expr;
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SFCParser$actions {



    public LinkedList alist = new LinkedList(); /// a list for gathering the statement objects

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = true;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else {
		// lineFlag == 0
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut


    
  private final SFCParser parser;

  /** Constructor */
  CUP$SFCParser$actions(SFCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SFCParser$do_action(
    int                        CUP$SFCParser$act_num,
    java_cup.runtime.lr_parser CUP$SFCParser$parser,
    java.util.Stack            CUP$SFCParser$stack,
    int                        CUP$SFCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SFCParser$result;

      /* select the action based on the action number */
      switch (CUP$SFCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= LPAREN expr RPAREN 
            {
              slime.absynt.Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 RESULT = e; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr op expr 
            {
              slime.absynt.Expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr l = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr r = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.B_expr(l, o.intValue(), r); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= op expr 
            {
              slime.absynt.Expr RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.U_expr(o.intValue(), e); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= constval 
            {
              slime.absynt.Expr RESULT = null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Constval cv = (slime.absynt.Constval)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = cv; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= var 
            {
              slime.absynt.Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Variable v = (slime.absynt.Variable)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = v; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= IDENTIFIER 
            {
              slime.absynt.Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.Variable(id); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= INTEGER 
            {
              slime.absynt.Expr RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.Constval(n.intValue()); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= FALSE 
            {
              slime.absynt.Expr RESULT = null;
		 RESULT = new slime.absynt.Constval(false); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= TRUE 
            {
              slime.absynt.Expr RESULT = null;
		 RESULT = new slime.absynt.Constval(true); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op ::= NEQ 
            {
              Integer RESULT = null;
		 pOut(0,"!=");RESULT=new Integer(slime.absynt.Expr.NEQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= GEQ 
            {
              Integer RESULT = null;
		 pOut(0,">=");RESULT=new Integer(slime.absynt.Expr.GEQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= LEQ 
            {
              Integer RESULT = null;
		 pOut(0,"<=");RESULT=new Integer(slime.absynt.Expr.LEQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op ::= GT 
            {
              Integer RESULT = null;
		 pOut(0,">") ;RESULT=new Integer(slime.absynt.Expr.GREATER); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op ::= LT 
            {
              Integer RESULT = null;
		 pOut(0,"<") ;RESULT=new Integer(slime.absynt.Expr.LESS); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op ::= EQ 
            {
              Integer RESULT = null;
		 pOut(0,"==");RESULT=new Integer(slime.absynt.Expr.EQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op ::= NOT 
            {
              Integer RESULT = null;
		 pOut(0,"!") ;RESULT=new Integer(slime.absynt.Expr.NEG); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op ::= OR 
            {
              Integer RESULT = null;
		 pOut(0,"||");RESULT=new Integer(slime.absynt.Expr.OR); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op ::= AND 
            {
              Integer RESULT = null;
		 pOut(0,"&&");RESULT=new Integer(slime.absynt.Expr.AND); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op ::= DIV 
            {
              Integer RESULT = null;
		 pOut(0,"/") ;RESULT=new Integer(slime.absynt.Expr.DIV); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op ::= SUB 
            {
              Integer RESULT = null;
		 pOut(0,"-") ;RESULT=new Integer(slime.absynt.Expr.MINUS); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op ::= MUL 
            {
              Integer RESULT = null;
		 pOut(0,"*") ;RESULT=new Integer(slime.absynt.Expr.TIMES); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op ::= ADD 
            {
              Integer RESULT = null;
		 pOut(0,"+") ;RESULT=new Integer(slime.absynt.Expr.PLUS); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vartype ::= BOOLTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.BoolType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vartype ::= INTTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.IntType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // process ::= PROCESS IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.Process RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	       RESULT= new slime.absynt.absfc.Process( 
		            name, (java.util.LinkedList) b
	       ); 
	     
              CUP$SFCParser$result = new java_cup.runtime.Symbol(23/*process*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // processlist ::= process processlist 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.absfc.Process p = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		  alist.clear();
		  alist.addLast( p );
		  alist.addAll( (java.util.LinkedList) pl );
		  RESULT = alist;
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // processlist ::= process 
            {
              LinkedList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.Process p1 = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   alist.clear();
		   alist.addLast( p1 );
		   RESULT = alist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procidlist ::= IDENTIFIER procidlist 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int proclistleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int proclistright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList proclist = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		  alist.clear();
		  alist.addLast( procname );
		  alist.addAll( (java.util.LinkedList) proclist );
		  RESULT = alist;
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procidlist ::= IDENTIFIER 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   alist.clear();
		   alist.addLast( procname );
		   RESULT=alist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmtjoin ::= JOIN LPAREN procidlist RPAREN 
            {
              slime.absynt.absfc.StmtJoin RESULT = null;
		int pidlleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pidlright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pidl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		   RESULT = new slime.absynt.absfc.StmtJoin( 
		               (java.util.LinkedList) pidl 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(21/*stmtjoin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmtsplit ::= SPLIT LPSET processlist RPSET 
            {
              slime.absynt.absfc.StmtSplit RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		    RESULT = new slime.absynt.absfc.StmtSplit(
			       (java.util.LinkedList) pl 
		    ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(20/*stmtsplit*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardeclaration ::= vartype IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		      RESULT = new slime.absynt.absfc.StmtDecl( 
			           new slime.absynt.Variable(vname), 
				   (slime.absynt.Type)vtype, e );  
                      // bei vartype evtl. non term aendern
		      // falls fuer den checker der echte Type
		      // verlorengeht. Ansonsten in der Absynt
		      // den Typ durch Klassenattribut "merken"
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vardeclaration ::= vartype IDENTIFIER SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		   RESULT = new slime.absynt.absfc.StmtDecl( 
		                new slime.absynt.Variable(vname), 
				(slime.absynt.Type)vtype ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment ::= IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtAssign RESULT = null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		 RESULT = new slime.absynt.absfc.StmtAssign( 
		     new slime.absynt.Variable(vname), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(12/*assignment*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtdummy ::= COMMENT 
            {
              slime.absynt.absfc.Comment RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   RESULT = new slime.absynt.absfc.Comment( 
		                  (String)c 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(22/*stmtdummy*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtinput ::= INPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtInput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
		 RESULT = new slime.absynt.absfc.StmtInput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(14/*stmtinput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtoutput ::= OUTPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtOutput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
  		   RESULT = new slime.absynt.absfc.StmtOutput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(15/*stmtoutput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtlooprepeat ::= REPEAT stmtblock UNTIL LPAREN expr RPAREN NT$0 SEMICOLON 
            {
              slime.absynt.absfc.StmtRepeat RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value != null )
                RESULT = (slime.absynt.absfc.StmtRepeat) ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(19/*stmtlooprepeat*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
 
		      RESULT = new slime.absynt.absfc.StmtRepeat( 
			          e, (java.util.LinkedList) b ); 
		    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(26/*NT$0*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmtloopwhile ::= WHILE LPAREN expr RPAREN stmtblock 
            {
              slime.absynt.absfc.StmtWhile RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		     RESULT = new slime.absynt.absfc.StmtWhile( 
			         e, (java.util.LinkedList) b 
		     ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(18/*stmtloopwhile*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmtifelse ::= IF LPAREN expr RPAREN stmtblock ELSE stmtblock 
            {
              slime.absynt.absfc.StmtIfElse RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		LinkedList b1 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b2 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   RESULT = new slime.absynt.absfc.StmtIfElse( 
		             e, 
			     (java.util.LinkedList) b1, 
			     (java.util.LinkedList) b2 
		   );
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(17/*stmtifelse*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtif ::= IF LPAREN expr RPAREN stmtblock 
            {
              slime.absynt.absfc.StmtIf RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	      RESULT = new slime.absynt.absfc.StmtIf( 
		            e, (java.util.LinkedList)b 
	      ); 
	    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(16/*stmtif*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmtatomic ::= stmtinput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmtatomic ::= stmtoutput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmtatomic ::= assignment 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmtatomic ::= vardeclaration 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= stmtdummy 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= stmtjoin 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= stmtsplit 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= stmtlooprepeat 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= stmtloopwhile 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= stmtifelse 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= stmtif 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= stmtatomic 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtblock ::= LPSET RPSET 
            {
              LinkedList RESULT = null;
		
		  alist.clear();
		  alist.addLast(
		      new slime.absynt.absfc.Comment( "// empty block" ) 
		  );
		  RESULT=alist;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmtblock ::= LPSET stmtlist RPSET 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 RESULT=l; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmtlist ::= stmt stmtlist 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
		  alist.clear();
		  alist.addLast(s);
		  alist.addAll( (java.util.LinkedList)sl);
		  RESULT=alist;  
	      
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtlist ::= stmtblock 
            {
              LinkedList RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  RESULT=b;  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmtlist ::= stmt 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
	        alist.clear();
	        alist.addLast( s );
	        RESULT=alist;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sfcprogram ::= SFCPRG IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.SFCabtree RESULT = null;
		int prognameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int prognameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String progname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)b ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(4/*sfcprogram*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sfcbegin ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  RESULT=e;  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sfcbegin EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		RESULT = start_val;
              CUP$SFCParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SFCParser$parser.done_parsing();
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sfcbegin ::= sfcprogram 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.SFCabtree p = (slime.absynt.absfc.SFCabtree)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  RESULT=p;  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

