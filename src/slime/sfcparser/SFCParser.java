
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Wed Jun 26 10:20:24 GMT 2002
//----------------------------------------------------

package slime.sfcparser;

import java_cup.runtime.*;
import java_cup.*;
import java.io.*;
import java.util.*;
import java.lang.String;

/** CUP v0.10j generated parser.
  * @version Wed Jun 26 10:20:24 GMT 2002
  */
public class SFCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SFCParser() {super();}

  /** Constructor which sets the default scanner. */
  public SFCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\006\005\000\002\006\011\000\002\014\003" +
    "\000\002\014\004\000\002\015\005\000\002\015\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\022\007\000" +
    "\002\023\011\000\002\024\007\000\002\034\002\000\002" +
    "\025\012\000\002\021\011\000\002\020\011\000\002\030" +
    "\003\000\002\030\004\000\002\016\006\000\002\017\005" +
    "\000\002\017\007\000\002\026\006\000\002\027\006\000" +
    "\002\033\003\000\002\033\004\000\002\032\003\000\002" +
    "\032\004\000\002\031\005\000\002\011\003\000\002\011" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\050\004\023\005\020\006\034\007\022\011" +
    "\005\012\010\013\011\014\014\020\006\021\015\022\026" +
    "\023\004\024\025\025\033\030\013\031\024\042\032\052" +
    "\012\053\027\001\002\000\046\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\031\uffcc" +
    "\052\uffcc\053\uffcc\001\002\000\046\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\030\uffd3\031" +
    "\uffd3\052\uffd3\053\uffd3\001\002\000\046\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\030\uffcf" +
    "\031\uffcf\052\uffcf\053\uffcf\001\002\000\036\002\uffff\004" +
    "\023\005\020\006\034\007\022\011\005\012\010\013\011" +
    "\020\006\021\015\022\026\023\004\024\025\025\033\001" +
    "\002\000\046\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\030\uffd2\031\uffd2\052\uffd2\053\uffd2" +
    "\001\002\000\046\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\030\uffd1\031\uffd1\052\uffd1\053" +
    "\uffd1\001\002\000\042\002\uffc7\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7\001\002" +
    "\000\042\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\uffca\012\uffca\013\uffca\015\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\027\uffca\001\002\000\046\004" +
    "\023\005\020\006\034\007\022\011\005\012\010\013\011" +
    "\014\014\020\006\021\015\022\026\023\004\024\025\025" +
    "\033\030\013\031\024\052\012\053\027\001\002\000\046" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\030\uffce\031\uffce\052\uffce\053\uffce\001\002\000" +
    "\046\004\023\005\020\006\034\007\022\011\005\012\010" +
    "\013\011\014\014\020\006\021\015\022\026\023\004\024" +
    "\025\025\033\030\013\031\024\052\012\053\027\001\002" +
    "\000\004\002\000\001\002\000\046\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\030\uffd5\031" +
    "\uffd5\052\uffd5\053\uffd5\001\002\000\042\002\uffc5\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\015" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\027\uffc5\001\002\000\046\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\030\uffd4\031\uffd4\052" +
    "\uffd4\053\uffd4\001\002\000\046\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\030\uffd7\031\uffd7" +
    "\052\uffd7\053\uffd7\001\002\000\042\002\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\027" +
    "\uffc9\001\002\000\046\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\030\uffd0\031\uffd0\052\uffd0" +
    "\053\uffd0\001\002\000\046\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\030\uffcd\031\uffcd\052" +
    "\uffcd\053\uffcd\001\002\000\042\002\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8" +
    "\001\002\000\004\002\170\001\002\000\042\002\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\015\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\027\uffc6\001\002\000\004\052\035\001\002\000\046" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\030\uffcb\031\uffcb\052\uffcb\053\uffcb\001\002\000" +
    "\046\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\030\uffd6\031\uffd6\052\uffd6\053\uffd6\001\002" +
    "\000\004\016\037\001\002\000\004\002\ufffe\001\002\000" +
    "\034\017\043\032\041\033\063\035\073\036\050\037\067" +
    "\041\056\043\052\045\045\046\042\047\066\050\070\052" +
    "\051\001\002\000\036\017\ufff0\027\ufff0\032\ufff0\033\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\041\ufff0\043\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\052\ufff0\001\002\000\004\052\uffd9" +
    "\001\002\000\004\014\162\001\002\000\046\002\ufff9\017" +
    "\ufff9\027\ufff9\032\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\001\002\000\036\017\ufff8" +
    "\027\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\041" +
    "\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052\ufff8" +
    "\001\002\000\004\014\156\001\002\000\036\017\ufff5\027" +
    "\ufff5\032\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5" +
    "\043\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\052\ufff5\001" +
    "\002\000\004\052\151\001\002\000\004\016\141\001\002" +
    "\000\004\034\136\001\002\000\004\014\130\001\002\000" +
    "\036\017\uffed\027\uffed\032\uffed\033\uffed\035\uffed\036\uffed" +
    "\037\uffed\041\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\052\uffed\001\002\000\036\017\ufff2\027\ufff2\032\ufff2" +
    "\033\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2\043\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\052\ufff2\001\002\000\036" +
    "\017\ufff3\027\ufff3\032\ufff3\033\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\041\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\052\ufff3\001\002\000\036\017\uffe5\027\uffe5\032\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\043\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\052\uffe5\001\002\000\036\017" +
    "\ufff7\027\ufff7\032\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\041\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\052" +
    "\ufff7\001\002\000\036\017\uffee\027\uffee\032\uffee\033\uffee" +
    "\035\uffee\036\uffee\037\uffee\041\uffee\043\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\052\uffee\001\002\000\036\017\uffef" +
    "\027\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037\uffef\041" +
    "\uffef\043\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef" +
    "\001\002\000\004\017\127\001\002\000\004\052\uffd8\001" +
    "\002\000\036\017\ufff6\027\ufff6\032\ufff6\033\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\041\ufff6\043\ufff6\045\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\052\ufff6\001\002\000\036\017\ufff4\027\ufff4" +
    "\032\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4\043" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\001\002" +
    "\000\004\014\121\001\002\000\004\014\114\001\002\000" +
    "\004\016\103\001\002\000\036\017\ufff1\027\ufff1\032\ufff1" +
    "\033\ufff1\035\ufff1\036\ufff1\037\ufff1\041\ufff1\043\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\001\002\000\036" +
    "\017\ufffc\027\075\032\041\033\063\035\073\036\050\037" +
    "\067\041\056\043\052\045\045\046\042\047\066\050\070" +
    "\052\051\001\002\000\004\027\074\001\002\000\036\017" +
    "\uffe4\027\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052" +
    "\uffe4\001\002\000\032\032\041\033\063\035\073\036\050" +
    "\037\067\041\056\043\052\045\045\046\042\047\066\050" +
    "\070\052\051\001\002\000\004\017\ufffb\001\002\000\034" +
    "\017\ufffc\032\041\033\063\035\073\036\050\037\067\041" +
    "\056\043\052\045\045\046\042\047\066\050\070\052\051" +
    "\001\002\000\004\017\101\001\002\000\004\002\ufffd\001" +
    "\002\000\004\051\104\001\002\000\034\017\043\032\041" +
    "\033\063\035\073\036\050\037\067\041\056\043\052\045" +
    "\045\046\042\047\066\050\070\052\051\001\002\000\004" +
    "\014\105\001\002\000\046\004\023\005\020\006\034\007" +
    "\022\011\005\012\010\013\011\014\014\020\006\021\015" +
    "\022\026\023\004\024\025\025\033\030\013\031\024\052" +
    "\012\053\027\001\002\000\036\004\023\005\020\006\034" +
    "\007\022\011\005\012\010\013\011\015\110\020\006\021" +
    "\015\022\026\023\004\024\025\025\033\001\002\000\046" +
    "\004\023\005\020\006\034\007\022\011\005\012\010\013" +
    "\011\014\014\020\006\021\015\022\026\023\004\024\025" +
    "\025\033\030\013\031\024\052\012\053\027\001\002\000" +
    "\004\027\uffe9\001\002\000\004\027\112\001\002\000\036" +
    "\017\uffe8\027\uffe8\032\uffe8\033\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\041\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\052\uffe8\001\002\000\042\002\uffc3\004\023\005\020\006" +
    "\034\007\022\011\005\012\010\013\011\015\uffc3\020\006" +
    "\021\015\022\026\023\004\024\025\025\033\027\uffc3\001" +
    "\002\000\004\052\115\001\002\000\006\015\uffde\052\115" +
    "\001\002\000\004\015\117\001\002\000\036\017\uffdf\027" +
    "\uffdf\032\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf" +
    "\043\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\001" +
    "\002\000\004\015\uffdd\001\002\000\004\052\122\001\002" +
    "\000\004\026\123\001\002\000\046\004\023\005\020\006" +
    "\034\007\022\011\005\012\010\013\011\014\014\020\006" +
    "\021\015\022\026\023\004\024\025\025\033\030\013\031" +
    "\024\052\012\053\027\001\002\000\036\004\023\005\020" +
    "\006\034\007\022\011\005\012\010\013\011\015\125\020" +
    "\006\021\015\022\026\023\004\024\025\025\033\001\002" +
    "\000\004\027\126\001\002\000\036\017\uffe7\027\uffe7\032" +
    "\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7\043\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\001\002\000" +
    "\046\002\ufffa\017\ufffa\027\ufffa\032\ufffa\033\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002" +
    "\000\046\004\023\005\020\006\034\007\022\011\005\012" +
    "\010\013\011\014\014\020\006\021\015\022\026\023\004" +
    "\024\025\025\033\030\013\031\024\052\012\053\027\001" +
    "\002\000\036\004\023\005\020\006\034\007\022\011\005" +
    "\012\010\013\011\015\132\020\006\021\015\022\026\023" +
    "\004\024\025\025\033\001\002\000\004\016\103\001\002" +
    "\000\040\017\uffec\027\uffec\032\uffec\033\uffec\035\uffec\036" +
    "\uffec\037\uffec\041\uffec\043\uffec\044\134\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\052\uffec\001\002\000\004\016\103\001" +
    "\002\000\036\017\uffeb\027\uffeb\032\uffeb\033\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\041\uffeb\043\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\052\uffeb\001\002\000\046\004\023\005\020" +
    "\006\034\007\022\011\005\012\010\013\011\014\014\020" +
    "\006\021\015\022\026\023\004\024\025\025\033\030\013" +
    "\031\024\052\012\053\027\001\002\000\036\004\023\005" +
    "\020\006\034\007\022\011\005\012\010\013\011\020\006" +
    "\021\015\022\026\023\004\024\025\025\033\027\140\001" +
    "\002\000\036\017\uffe3\027\uffe3\032\uffe3\033\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\041\uffe3\043\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\052\uffe3\001\002\000\004\040\143\001\002" +
    "\000\004\017\150\001\002\000\004\052\146\001\002\000" +
    "\006\017\uffdc\040\143\001\002\000\004\017\uffdb\001\002" +
    "\000\004\016\103\001\002\000\006\017\uffda\040\uffda\001" +
    "\002\000\036\017\uffe0\027\uffe0\032\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\041\uffe0\043\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\052\uffe0\001\002\000\006\027\152\034\153" +
    "\001\002\000\036\017\uffe2\027\uffe2\032\uffe2\033\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\041\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\052\uffe2\001\002\000\046\004\023\005" +
    "\020\006\034\007\022\011\005\012\010\013\011\014\014" +
    "\020\006\021\015\022\026\023\004\024\025\025\033\030" +
    "\013\031\024\052\012\053\027\001\002\000\036\004\023" +
    "\005\020\006\034\007\022\011\005\012\010\013\011\020" +
    "\006\021\015\022\026\023\004\024\025\025\033\027\155" +
    "\001\002\000\036\017\uffe1\027\uffe1\032\uffe1\033\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\041\uffe1\043\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\052\uffe1\001\002\000\046\004\023\005" +
    "\020\006\034\007\022\011\005\012\010\013\011\014\014" +
    "\020\006\021\015\022\026\023\004\024\025\025\033\030" +
    "\013\031\024\052\012\053\027\001\002\000\036\004\023" +
    "\005\020\006\034\007\022\011\005\012\010\013\011\015" +
    "\160\020\006\021\015\022\026\023\004\024\025\025\033" +
    "\001\002\000\004\016\103\001\002\000\036\017\uffea\027" +
    "\uffea\032\uffea\033\uffea\035\uffea\036\uffea\037\uffea\041\uffea" +
    "\043\uffea\045\uffea\046\uffea\047\uffea\050\uffea\052\uffea\001" +
    "\002\000\004\052\163\001\002\000\004\026\164\001\002" +
    "\000\046\004\023\005\020\006\034\007\022\011\005\012" +
    "\010\013\011\014\014\020\006\021\015\022\026\023\004" +
    "\024\025\025\033\030\013\031\024\052\012\053\027\001" +
    "\002\000\036\004\023\005\020\006\034\007\022\011\005" +
    "\012\010\013\011\015\166\020\006\021\015\022\026\023" +
    "\004\024\025\025\033\001\002\000\004\027\167\001\002" +
    "\000\036\017\uffe6\027\uffe6\032\uffe6\033\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\041\uffe6\043\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\052\uffe6\001\002\000\004\002\001\001\002\000" +
    "\042\002\uffc4\004\023\005\020\006\034\007\022\011\005" +
    "\012\010\013\011\015\uffc4\020\006\021\015\022\026\023" +
    "\004\024\025\025\033\027\uffc4\001\002\000\036\004\023" +
    "\005\020\006\034\007\022\011\005\012\010\013\011\015" +
    "\173\020\006\021\015\022\026\023\004\024\025\025\033" +
    "\001\002\000\042\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\027\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\016\003\027\006\016\007\006\010\030\012" +
    "\020\013\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\171\010\030\012\020\013\015\001\001\000" +
    "\002\001\001\000\012\007\170\010\030\012\020\013\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\035\001\001\000" +
    "\002\001\001\000\040\004\071\005\043\011\046\014\061" +
    "\016\060\017\037\020\052\021\057\022\056\023\063\024" +
    "\045\025\064\026\054\027\053\030\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\101\001\001\000\002\001\001" +
    "\000\040\004\076\005\043\011\046\014\075\016\060\017" +
    "\037\020\052\021\057\022\056\023\063\024\045\025\064" +
    "\026\054\027\053\030\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\076\005\043\011\046\014\077" +
    "\016\060\017\037\020\052\021\057\022\056\023\063\024" +
    "\045\025\064\026\054\027\053\030\070\001\001\000\002" +
    "\001\001\000\040\004\076\005\043\011\046\014\075\016" +
    "\060\017\037\020\052\021\057\022\056\023\063\024\045" +
    "\025\064\026\054\027\053\030\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\076" +
    "\005\043\011\046\014\061\016\060\017\037\020\052\021" +
    "\057\022\056\023\063\024\045\025\064\026\054\027\053" +
    "\030\070\001\001\000\002\001\001\000\012\007\105\010" +
    "\030\012\020\013\015\001\001\000\004\013\106\001\001" +
    "\000\012\007\112\010\030\012\020\013\015\001\001\000" +
    "\004\034\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\106\001\001\000\004\033\115\001\001\000" +
    "\004\033\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\123\010\030\012\020\013\015\001\001\000\004" +
    "\013\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\130\010\030\012\020\013\015" +
    "\001\001\000\004\013\106\001\001\000\004\015\132\001" +
    "\001\000\002\001\001\000\004\015\134\001\001\000\002" +
    "\001\001\000\012\007\136\010\030\012\020\013\015\001" +
    "\001\000\004\013\106\001\001\000\002\001\001\000\006" +
    "\031\143\032\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\143\032\144\001\001\000\002\001\001" +
    "\000\004\015\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\153" +
    "\010\030\012\020\013\015\001\001\000\004\013\106\001" +
    "\001\000\002\001\001\000\012\007\156\010\030\012\020" +
    "\013\015\001\001\000\004\013\106\001\001\000\004\015" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\164\010\030\012\020\013\015\001" +
    "\001\000\004\013\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\106\001\001\000" +
    "\004\013\106\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SFCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SFCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SFCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    SFCLex lexer;

/**
 * <b>CUP: report_fatal_error</b><br>
 * This method should be called whenever a non-recoverable error<br>
 * occurs. It responds by calling report_error(), then aborts<br>
 * parsing by calling the parser method done_parsing(), and<br>
 * finally throws an exception. (In general done_parsing() should<br>
 * be called at any point that parsing needs to be terminated early).<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void report_fatal_error(String message, Object info) throws SFCParseException {
  System.err.println( message );
  throw new SFCParseException( message );
  } // end of report_fatal_error
*/

/**
 * <b>CUP: report_error</b><br>
 * This method should be called whenever an error message is to be<br>
 * issued. In the default implementation of this method, the first<br>
 * parameter provides the text of a message which is printed on<br>
 * System.err and the second parameter is simply ignored. It is<br>
 * very typical to override this method in order to provide a more<br>
 * sophisticated error reporting mechanism.<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void report_error(String message, Object info) {
  System.err.println( "SFC Parser: " + message );
  } // end of report_error 
*/  

/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser as soon as a syntax error<br>
 * is detected (but before error recovery is attempted). In the<br>
 * default implementation it calls: report_error("Syntax error", null);<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void syntax_error(Symbol cur_token) {
  report_error("SFC Parser : SYNTAX ERROR - current symbol: " + cur_token, null );
  } // end of syntax_error
*/
  
/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser if it is unable to recover
 * from a syntax error. In the default implementation it calls:
 * report_fatal_error("Couldn't repair and continue parse", null);
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void unrecovered_syntax_error(Symbol cur_token) throws SFCParseException {
  done_parsing();       
  report_fatal_error("SFC Parser : FATAL PARSING ERROR", null);
  } // end of unrecovered_syntax_error
*/

/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser to determine how many<br>
 * tokens it must successfully parse in order to consider an error<br>
 * recovery successful. The default implementation returns 3.<br>
 * Values below 2 are not recommended. See the section on<br>
 * error recovery for details.<br>
 * @return 3 <b>the standard size</b>
 **/ 
/*
//  protected int error_sync_size() {
//  return 9;
//  } // end of error_sync_size
*/

/** 
 * <b> parseFile </b>
 * @param java.io.File sourcefile - file to parse
 * @return abstract syntax tree with slime.absynt.sfc as root
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.absfc.SFCabtree parseFile(java.io.File sfcfile) throws Exception { // slime.sfcparser.SFCParseException {
	boolean doDebugParse = true;
	FileInputStream FIS = null;
	// Process of parsing a file:
	// create a parsing object
	// SFCParser mySFCParserObj = new SFCParser();
	// open input files, etc. here
	// Symbol myParseTree = null;
  
	// Initialize the Abstract Syntax Tree for the Sequential Function Chart
	slime.absynt.absfc.SFCabtree sfc2 = null;

	try {
	    FIS = new FileInputStream( sfcfile );
	    lexer   = new SFCLex( FIS );
	    setScanner( lexer );
	    if (doDebugParse) {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value;
	    } else {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value; 
	    } // end of if-doDebugParse
	} catch (IOException ioe) {
	  throw ioe;
	} catch (Exception e) {
	    throw e;
	} finally {
	    FIS.close();
	} // end of try-catch
	return sfc2;      
    } // end of parseFile


/** 
 * <b> parseExpression </b>
 * @param java.lang.String sfcexpr - Expression to parse <br>
 * @return slime.absynt.Expr - abstract syntax expression <br>
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.Expr parseExpression(java.lang.String sfcexpr) throws SFCParseException {
	slime.absynt.Expr expr = null;
	try {
	    lexer = new SFCLex( new StringReader( sfcexpr ) );
	    setScanner(lexer);
	    expr = (slime.absynt.Expr)parse().value;
	} catch (Exception le) {
	    System.out.println("Error parsing expression");
	    throw new slime.sfcparser.SFCParseException("Error parsing expression");
	} // end try catch
	return expr;
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SFCParser$actions {



    public LinkedList alist = new LinkedList(); /// a list for gathering the statement objects

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = true;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else {
		// lineFlag == 0
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut


    
  private final SFCParser parser;

  /** Constructor */
  CUP$SFCParser$actions(SFCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SFCParser$do_action(
    int                        CUP$SFCParser$act_num,
    java_cup.runtime.lr_parser CUP$SFCParser$parser,
    java.util.Stack            CUP$SFCParser$stack,
    int                        CUP$SFCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SFCParser$result;

      /* select the action based on the action number */
      switch (CUP$SFCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= LPAREN expr RPAREN 
            {
              slime.absynt.Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 RESULT = e; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr op expr 
            {
              slime.absynt.Expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr l = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr r = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.B_expr(l, o.intValue(), r); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= op expr 
            {
              slime.absynt.Expr RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.U_expr(o.intValue(), e); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= constval 
            {
              slime.absynt.Expr RESULT = null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Constval cv = (slime.absynt.Constval)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = cv; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= var 
            {
              slime.absynt.Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Variable v = (slime.absynt.Variable)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = v; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= IDENTIFIER 
            {
              slime.absynt.Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.Variable(id); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= INTEGER 
            {
              slime.absynt.Expr RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = new slime.absynt.Constval( n.intValue() ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= FALSE 
            {
              slime.absynt.Expr RESULT = null;
		 RESULT = new slime.absynt.Constval(false); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= TRUE 
            {
              slime.absynt.Expr RESULT = null;
		 RESULT = new slime.absynt.Constval(true); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op ::= NEQ 
            {
              Integer RESULT = null;
		 pOut(0,"!=");RESULT=new Integer(slime.absynt.Expr.NEQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op ::= GEQ 
            {
              Integer RESULT = null;
		 pOut(0,">=");RESULT=new Integer(slime.absynt.Expr.GEQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= LEQ 
            {
              Integer RESULT = null;
		 pOut(0,"<=");RESULT=new Integer(slime.absynt.Expr.LEQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= GT 
            {
              Integer RESULT = null;
		 pOut(0,">") ;RESULT=new Integer(slime.absynt.Expr.GREATER); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op ::= LT 
            {
              Integer RESULT = null;
		 pOut(0,"<") ;RESULT=new Integer(slime.absynt.Expr.LESS); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op ::= EQ 
            {
              Integer RESULT = null;
		 pOut(0,"==");RESULT=new Integer(slime.absynt.Expr.EQ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op ::= NOT 
            {
              Integer RESULT = null;
		 pOut(0,"!") ;RESULT=new Integer(slime.absynt.Expr.NEG); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op ::= OR 
            {
              Integer RESULT = null;
		 pOut(0,"||");RESULT=new Integer(slime.absynt.Expr.OR); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op ::= AND 
            {
              Integer RESULT = null;
		 pOut(0,"&&");RESULT=new Integer(slime.absynt.Expr.AND); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op ::= DIV 
            {
              Integer RESULT = null;
		 pOut(0,"/") ;RESULT=new Integer(slime.absynt.Expr.DIV); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op ::= SUB 
            {
              Integer RESULT = null;
		 pOut(0,"-") ;RESULT=new Integer(slime.absynt.Expr.MINUS); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op ::= MUL 
            {
              Integer RESULT = null;
		 pOut(0,"*") ;RESULT=new Integer(slime.absynt.Expr.TIMES); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op ::= ADD 
            {
              Integer RESULT = null;
		 pOut(0,"+") ;RESULT=new Integer(slime.absynt.Expr.PLUS); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vartype ::= BOOLTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.BoolType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vartype ::= INTTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.IntType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // process ::= PROCESS IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.Process RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	       RESULT= new slime.absynt.absfc.Process( 
		            name, (java.util.LinkedList) b
	       ); 
	     
              CUP$SFCParser$result = new java_cup.runtime.Symbol(23/*process*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // processlist ::= process processlist 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.absfc.Process p = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		  alist.clear();
		  alist.addLast( p );
		  alist.addAll( (java.util.LinkedList) pl );
		  RESULT = alist;
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // processlist ::= process 
            {
              LinkedList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.Process p1 = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   alist.clear();
		   alist.addLast( p1 );
		   RESULT = alist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procidlist ::= IDENTIFIER procidlist 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int proclistleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int proclistright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList proclist = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		  alist.clear();
		  alist.addLast( procname );
		  alist.addAll( (java.util.LinkedList) proclist );
		  RESULT = alist;
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procidlist ::= IDENTIFIER 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   alist.clear();
		   alist.addLast( procname );
		   RESULT=alist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmtjoin ::= JOIN LPAREN procidlist RPAREN 
            {
              slime.absynt.absfc.StmtJoin RESULT = null;
		int pidlleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pidlright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pidl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		   RESULT = new slime.absynt.absfc.StmtJoin( 
		               (java.util.LinkedList) pidl 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(21/*stmtjoin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmtsplit ::= SPLIT LPSET processlist RPSET 
            {
              slime.absynt.absfc.StmtSplit RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		    RESULT = new slime.absynt.absfc.StmtSplit(
			       (java.util.LinkedList) pl 
		    ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(20/*stmtsplit*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardeclaration ::= vartype IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		      RESULT = new slime.absynt.absfc.StmtDecl( 
			           new slime.absynt.Variable(vname), 
				   (slime.absynt.Type)vtype, e );  
                      // bei vartype evtl. non term aendern
		      // falls fuer den checker der echte Type
		      // verlorengeht. Ansonsten in der Absynt
		      // den Typ durch Klassenattribut "merken"
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardeclaration ::= vartype IDENTIFIER SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		   RESULT = new slime.absynt.absfc.StmtDecl( 
		                new slime.absynt.Variable(vname), 
				(slime.absynt.Type)vtype ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtAssign RESULT = null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		 RESULT = new slime.absynt.absfc.StmtAssign( 
		     new slime.absynt.Variable(vname), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(12/*assignment*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmtdummy ::= SKIP SEMICOLON 
            {
              slime.absynt.absfc.Comment RESULT = null;
		 
		   RESULT = new slime.absynt.absfc.Comment("nop"); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(22/*stmtdummy*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtdummy ::= COMMENT 
            {
              slime.absynt.absfc.Comment RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   RESULT = new slime.absynt.absfc.Comment( 
		                  (String)c 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(22/*stmtdummy*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtinput ::= INPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtInput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
		 RESULT = new slime.absynt.absfc.StmtInput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(14/*stmtinput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtoutput ::= OUTPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtOutput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
  		   RESULT = new slime.absynt.absfc.StmtOutput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(15/*stmtoutput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtlooprepeat ::= REPEAT stmtblock UNTIL LPAREN expr RPAREN NT$0 SEMICOLON 
            {
              slime.absynt.absfc.StmtRepeat RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value != null )
                RESULT = (slime.absynt.absfc.StmtRepeat) ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(19/*stmtlooprepeat*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
 
		      RESULT = new slime.absynt.absfc.StmtRepeat( 
			          e, (java.util.LinkedList) b ); 
		    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(26/*NT$0*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmtloopwhile ::= WHILE LPAREN expr RPAREN stmtblock 
            {
              slime.absynt.absfc.StmtWhile RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		     RESULT = new slime.absynt.absfc.StmtWhile( 
			         e, (java.util.LinkedList) b 
		     ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(18/*stmtloopwhile*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmtifelse ::= IF LPAREN expr RPAREN stmtblock ELSE stmtblock 
            {
              slime.absynt.absfc.StmtIfElse RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		LinkedList b1 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b2 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   RESULT = new slime.absynt.absfc.StmtIfElse( 
		             e, 
			     (java.util.LinkedList) b1, 
			     (java.util.LinkedList) b2 
		   );
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(17/*stmtifelse*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtif ::= IF LPAREN expr RPAREN stmtblock 
            {
              slime.absynt.absfc.StmtIf RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	      RESULT = new slime.absynt.absfc.StmtIf( 
		            e, (java.util.LinkedList)b 
	      ); 
	    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(16/*stmtif*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmtatomic ::= stmtinput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmtatomic ::= stmtoutput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmtatomic ::= assignment 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmtatomic ::= vardeclaration 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= stmtdummy 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= stmtjoin 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= stmtsplit 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= stmtlooprepeat 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= stmtloopwhile 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= stmtifelse 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= stmtif 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= stmtatomic 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtblock ::= LPSET RPSET 
            {
              LinkedList RESULT = null;
		
		  alist.clear();
		  alist.addLast(
		      new slime.absynt.absfc.Comment( "// empty block" ) 
		  );
		  RESULT=alist;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmtblock ::= LPSET stmtlist RPSET 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 RESULT=l; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmtlist ::= stmt stmtlist 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
		  alist.clear();
		  alist.addLast(s);
		  alist.addAll( (java.util.LinkedList)sl);
		  RESULT=alist;  
	      
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtlist ::= stmt 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
	        alist.clear();
	        alist.addLast( s );
	        RESULT=alist;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sfcprogram ::= SFCPRG IDENTIFIER LPSET stmt SEMICOLON stmtlist RPSET 
            {
              slime.absynt.absfc.SFCabtree RESULT = null;
		int prognameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).left;
		int prognameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).right;
		String progname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList b2 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		    java.util.LinkedList blist = new java.util.LinkedList();
		    blist.add(b1);blist.addAll(b2);
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)blist ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(4/*sfcprogram*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sfcprogram ::= SFCPRG IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.SFCabtree RESULT = null;
		int prognameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int prognameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String progname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)b ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(4/*sfcprogram*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sfcbegin ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  RESULT=e;  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sfcbegin ::= sfcprogram 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.SFCabtree p = (slime.absynt.absfc.SFCabtree)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  RESULT=p;  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sfcbegin EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		RESULT = start_val;
              CUP$SFCParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SFCParser$parser.done_parsing();
          return CUP$SFCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

