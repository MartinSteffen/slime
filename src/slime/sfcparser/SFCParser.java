
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jun 29 23:14:54 GMT 2002
//----------------------------------------------------

package slime.sfcparser;

import java_cup.runtime.*;
import java_cup.*;
import java.io.*;
import java.util.*;
import java.lang.String;

/** CUP v0.10k generated parser.
  * @version Sat Jun 29 23:14:54 GMT 2002
  */
public class SFCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SFCParser() {super();}

  /** Constructor which sets the default scanner. */
  public SFCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\006\005\000\002\006\011\000\002\014\003" +
    "\000\002\014\004\000\002\015\005\000\002\015\005\000" +
    "\002\015\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\022\010\000\002\023\012\000\002\024\010\000\002" +
    "\034\002\000\002\025\012\000\002\021\011\000\002\020" +
    "\011\000\002\030\003\000\002\030\004\000\002\016\006" +
    "\000\002\017\005\000\002\017\007\000\002\026\006\000" +
    "\002\027\006\000\002\033\003\000\002\033\004\000\002" +
    "\032\003\000\002\032\004\000\002\031\005\000\002\011" +
    "\003\000\002\011\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\010\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\003\000\002" +
    "\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\050\006\012\007\027\010\023\011\020\012" +
    "\033\013\022\014\005\015\010\016\011\017\014\023\006" +
    "\024\015\025\026\026\004\027\025\030\034\033\013\034" +
    "\024\045\032\001\002\000\046\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\033\uffcb\034\uffcb\001\002\000\046\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\033\uffd2\034\uffd2\001\002\000\046\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\033\uffce\034\uffce\001\002\000\036\002\uffff\010" +
    "\023\011\020\012\033\013\022\014\005\015\010\016\011" +
    "\023\006\024\015\025\026\026\004\027\025\030\034\001" +
    "\002\000\046\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\034\uffd1" +
    "\001\002\000\046\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\033\uffd0\034" +
    "\uffd0\001\002\000\042\002\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9\001\002" +
    "\000\042\002\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\020\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\032\uffc8\001\002\000\046\006" +
    "\012\007\027\010\023\011\020\012\033\013\022\014\005" +
    "\015\010\016\011\017\014\023\006\024\015\025\026\026" +
    "\004\027\025\030\034\033\013\034\024\001\002\000\046" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\033\uffcd\034\uffcd\001\002\000" +
    "\046\006\012\007\027\010\023\011\020\012\033\013\022" +
    "\014\005\015\010\016\011\017\014\023\006\024\015\025" +
    "\026\026\004\027\025\030\034\033\013\034\024\001\002" +
    "\000\004\002\000\001\002\000\046\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\033\uffd4\034\uffd4\001\002\000\042\002\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\032\uffc1\001\002\000\046\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\033" +
    "\uffd3\034\uffd3\001\002\000\046\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\033\uffd6\034\uffd6\001\002\000\042\002\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032" +
    "\uffc7\001\002\000\046\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf" +
    "\034\uffcf\001\002\000\046\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\033" +
    "\uffcc\034\uffcc\001\002\000\042\002\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6" +
    "\001\002\000\004\002\175\001\002\000\042\002\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\020\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\032\uffc2\001\002\000\004\006\035\001\002\000\046" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\033\uffd5\034\uffd5\001\002\000" +
    "\046\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\033\uffca\034\uffca\001\002" +
    "\000\004\021\037\001\002\000\004\002\ufffe\001\002\000" +
    "\034\006\051\022\043\035\041\036\063\040\073\041\047" +
    "\042\067\044\056\046\052\050\045\051\042\052\065\053" +
    "\070\001\002\000\036\006\uffef\022\uffef\032\uffef\035\uffef" +
    "\036\uffef\040\uffef\041\uffef\042\uffef\044\uffef\046\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\001\002\000\004\006\uffd8" +
    "\001\002\000\004\017\167\001\002\000\016\002\ufff8\022" +
    "\ufff8\032\ufff8\043\ufff8\047\ufff8\054\ufff8\001\002\000\036" +
    "\006\ufff7\022\ufff7\032\ufff7\035\ufff7\036\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\044\ufff7\046\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\001\002\000\004\017\162\001\002\000\036\006" +
    "\ufff4\022\ufff4\032\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\001\002\000\004\021\152\001\002\000\004\006\145" +
    "\001\002\000\004\037\142\001\002\000\004\017\132\001" +
    "\002\000\036\006\uffec\022\uffec\032\uffec\035\uffec\036\uffec" +
    "\040\uffec\041\uffec\042\uffec\044\uffec\046\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\001\002\000\036\006\ufff1\022\ufff1" +
    "\032\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\044" +
    "\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002" +
    "\000\036\006\ufff2\022\ufff2\032\ufff2\035\ufff2\036\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\044\ufff2\046\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\001\002\000\036\006\uffe4\022\uffe4\032" +
    "\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4" +
    "\046\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000" +
    "\036\006\ufff6\022\ufff6\032\ufff6\035\ufff6\036\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\044\ufff6\046\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\001\002\000\036\006\uffee\022\uffee\032\uffee" +
    "\035\uffee\036\uffee\040\uffee\041\uffee\042\uffee\044\uffee\046" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\001\002\000\036" +
    "\006\uffed\022\uffed\032\uffed\035\uffed\036\uffed\040\uffed\041" +
    "\uffed\042\uffed\044\uffed\046\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\001\002\000\004\022\131\001\002\000\004\006" +
    "\uffd7\001\002\000\036\006\ufff5\022\ufff5\032\ufff5\035\ufff5" +
    "\036\ufff5\040\ufff5\041\ufff5\042\ufff5\044\ufff5\046\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002\000\004\017\123" +
    "\001\002\000\036\006\ufff3\022\ufff3\032\ufff3\035\ufff3\036" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\044\ufff3\046\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\001\002\000\004\017\116\001" +
    "\002\000\004\021\104\001\002\000\036\006\ufff0\022\ufff0" +
    "\032\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0\042\ufff0\044" +
    "\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\036\006\051\022\076\032\075\035\041\036\063\040" +
    "\073\041\047\042\067\044\056\046\052\050\045\051\042" +
    "\052\065\053\070\001\002\000\004\032\074\001\002\000" +
    "\036\006\uffe3\022\uffe3\032\uffe3\035\uffe3\036\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\044\uffe3\046\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\001\002\000\032\006\051\035\041\036\063" +
    "\040\073\041\047\042\067\044\056\046\052\050\045\051" +
    "\042\052\065\053\070\001\002\000\016\002\ufff9\022\ufff9" +
    "\032\ufff9\043\ufff9\047\ufff9\054\ufff9\001\002\000\004\022" +
    "\ufffb\001\002\000\034\006\051\022\ufffc\035\041\036\063" +
    "\040\073\041\047\042\067\044\056\046\052\050\045\051" +
    "\042\052\065\053\070\001\002\000\004\022\102\001\002" +
    "\000\004\002\ufffd\001\002\000\004\054\106\001\002\000" +
    "\034\006\051\022\043\035\041\036\063\040\073\041\047" +
    "\042\067\044\056\046\052\050\045\051\042\052\065\053" +
    "\070\001\002\000\034\006\051\022\076\035\041\036\063" +
    "\040\073\041\047\042\067\044\056\046\052\050\045\051" +
    "\042\052\065\053\070\001\002\000\004\017\107\001\002" +
    "\000\046\006\012\007\027\010\023\011\020\012\033\013" +
    "\022\014\005\015\010\016\011\017\014\023\006\024\015" +
    "\025\026\026\004\027\025\030\034\033\013\034\024\001" +
    "\002\000\036\010\023\011\020\012\033\013\022\014\005" +
    "\015\010\016\011\020\112\023\006\024\015\025\026\026" +
    "\004\027\025\030\034\001\002\000\046\006\012\007\027" +
    "\010\023\011\020\012\033\013\022\014\005\015\010\016" +
    "\011\017\014\023\006\024\015\025\026\026\004\027\025" +
    "\030\034\033\013\034\024\001\002\000\004\032\uffe8\001" +
    "\002\000\004\032\114\001\002\000\036\006\uffe7\022\uffe7" +
    "\032\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7\042\uffe7\044" +
    "\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002" +
    "\000\042\002\uffc4\010\023\011\020\012\033\013\022\014" +
    "\005\015\010\016\011\020\uffc4\023\006\024\015\025\026" +
    "\026\004\027\025\030\034\032\uffc4\001\002\000\004\006" +
    "\117\001\002\000\006\006\117\020\uffdd\001\002\000\004" +
    "\020\121\001\002\000\036\006\uffde\022\uffde\032\uffde\035" +
    "\uffde\036\uffde\040\uffde\041\uffde\042\uffde\044\uffde\046\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\001\002\000\004\020" +
    "\uffdc\001\002\000\004\006\124\001\002\000\004\031\125" +
    "\001\002\000\046\006\012\007\027\010\023\011\020\012" +
    "\033\013\022\014\005\015\010\016\011\017\014\023\006" +
    "\024\015\025\026\026\004\027\025\030\034\033\013\034" +
    "\024\001\002\000\036\010\023\011\020\012\033\013\022" +
    "\014\005\015\010\016\011\020\127\023\006\024\015\025" +
    "\026\026\004\027\025\030\034\001\002\000\004\032\130" +
    "\001\002\000\036\006\uffe6\022\uffe6\032\uffe6\035\uffe6\036" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\046\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\001\002\000\016\002\ufffa\022" +
    "\ufffa\032\ufffa\043\ufffa\047\ufffa\054\ufffa\001\002\000\046" +
    "\006\012\007\027\010\023\011\020\012\033\013\022\014" +
    "\005\015\010\016\011\017\014\023\006\024\015\025\026" +
    "\026\004\027\025\030\034\033\013\034\024\001\002\000" +
    "\036\010\023\011\020\012\033\013\022\014\005\015\010" +
    "\016\011\020\134\023\006\024\015\025\026\026\004\027" +
    "\025\030\034\001\002\000\004\021\104\001\002\000\006" +
    "\032\136\047\137\001\002\000\036\006\uffeb\022\uffeb\032" +
    "\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\044\uffeb" +
    "\046\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000" +
    "\004\021\104\001\002\000\004\032\141\001\002\000\036" +
    "\006\uffea\022\uffea\032\uffea\035\uffea\036\uffea\040\uffea\041" +
    "\uffea\042\uffea\044\uffea\046\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\001\002\000\046\006\012\007\027\010\023\011" +
    "\020\012\033\013\022\014\005\015\010\016\011\017\014" +
    "\023\006\024\015\025\026\026\004\027\025\030\034\033" +
    "\013\034\024\001\002\000\036\010\023\011\020\012\033" +
    "\013\022\014\005\015\010\016\011\023\006\024\015\025" +
    "\026\026\004\027\025\030\034\032\144\001\002\000\036" +
    "\006\uffe2\022\uffe2\032\uffe2\035\uffe2\036\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\044\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\001\002\000\006\032\146\037\147\001\002\000" +
    "\036\006\uffe1\022\uffe1\032\uffe1\035\uffe1\036\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\044\uffe1\046\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\001\002\000\046\006\012\007\027\010\023" +
    "\011\020\012\033\013\022\014\005\015\010\016\011\017" +
    "\014\023\006\024\015\025\026\026\004\027\025\030\034" +
    "\033\013\034\024\001\002\000\036\010\023\011\020\012" +
    "\033\013\022\014\005\015\010\016\011\023\006\024\015" +
    "\025\026\026\004\027\025\030\034\032\151\001\002\000" +
    "\036\006\uffe0\022\uffe0\032\uffe0\035\uffe0\036\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\044\uffe0\046\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\001\002\000\004\043\154\001\002\000\004" +
    "\022\161\001\002\000\004\006\157\001\002\000\006\022" +
    "\uffdb\043\154\001\002\000\004\022\uffda\001\002\000\004" +
    "\021\104\001\002\000\006\022\uffd9\043\uffd9\001\002\000" +
    "\036\006\uffdf\022\uffdf\032\uffdf\035\uffdf\036\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\044\uffdf\046\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\001\002\000\046\006\012\007\027\010\023" +
    "\011\020\012\033\013\022\014\005\015\010\016\011\017" +
    "\014\023\006\024\015\025\026\026\004\027\025\030\034" +
    "\033\013\034\024\001\002\000\036\010\023\011\020\012" +
    "\033\013\022\014\005\015\010\016\011\020\164\023\006" +
    "\024\015\025\026\026\004\027\025\030\034\001\002\000" +
    "\004\021\104\001\002\000\004\032\166\001\002\000\036" +
    "\006\uffe9\022\uffe9\032\uffe9\035\uffe9\036\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\044\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\001\002\000\004\006\170\001\002\000\004\031" +
    "\171\001\002\000\046\006\012\007\027\010\023\011\020" +
    "\012\033\013\022\014\005\015\010\016\011\017\014\023" +
    "\006\024\015\025\026\026\004\027\025\030\034\033\013" +
    "\034\024\001\002\000\036\010\023\011\020\012\033\013" +
    "\022\014\005\015\010\016\011\020\173\023\006\024\015" +
    "\025\026\026\004\027\025\030\034\001\002\000\004\032" +
    "\174\001\002\000\036\006\uffe5\022\uffe5\032\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\046\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\004\002\001" +
    "\001\002\000\042\002\uffc3\010\023\011\020\012\033\013" +
    "\022\014\005\015\010\016\011\020\uffc3\023\006\024\015" +
    "\025\026\026\004\027\025\030\034\032\uffc3\001\002\000" +
    "\036\010\023\011\020\012\033\013\022\014\005\015\010" +
    "\016\011\020\200\023\006\024\015\025\026\026\004\027" +
    "\025\030\034\001\002\000\042\002\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\016\003\027\006\016\007\006\010\030\012" +
    "\020\013\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\176\010\030\012\020\013\015\001\001\000" +
    "\002\001\001\000\012\007\175\010\030\012\020\013\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\035\001\001\000" +
    "\002\001\001\000\040\004\071\005\043\011\047\014\061" +
    "\016\057\017\037\020\052\021\060\022\056\023\063\024" +
    "\045\025\065\026\054\027\053\030\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\102\001\001\000\002\001\001" +
    "\000\040\004\077\005\043\011\047\014\076\016\057\017" +
    "\037\020\052\021\060\022\056\023\063\024\045\025\065" +
    "\026\054\027\053\030\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\077\005\043\011\047\014\100" +
    "\016\057\017\037\020\052\021\060\022\056\023\063\024" +
    "\045\025\065\026\054\027\053\030\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\077\005\043\011" +
    "\047\014\076\016\057\017\037\020\052\021\060\022\056" +
    "\023\063\024\045\025\065\026\054\027\053\030\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\104\005\043\011\047\014\061\016\057\017" +
    "\037\020\052\021\060\022\056\023\063\024\045\025\065" +
    "\026\054\027\053\030\070\001\001\000\040\004\077\005" +
    "\043\011\047\014\076\016\057\017\037\020\052\021\060" +
    "\022\056\023\063\024\045\025\065\026\054\027\053\030" +
    "\070\001\001\000\002\001\001\000\012\007\107\010\030" +
    "\012\020\013\015\001\001\000\004\013\110\001\001\000" +
    "\012\007\114\010\030\012\020\013\015\001\001\000\004" +
    "\034\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\110\001\001\000\004\033\117\001\001\000\004" +
    "\033\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\125\010\030\012\020\013\015\001\001\000\004\013" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\132\010\030\012\020\013\015\001" +
    "\001\000\004\013\110\001\001\000\004\015\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\142" +
    "\010\030\012\020\013\015\001\001\000\004\013\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\147\010\030\012\020\013\015\001\001\000" +
    "\004\013\110\001\001\000\002\001\001\000\006\031\154" +
    "\032\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\154\032\155\001\001\000\002\001\001\000\004" +
    "\015\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\162\010\030\012\020\013\015\001\001\000\004" +
    "\013\110\001\001\000\004\015\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\171\010\030\012\020\013\015\001\001\000" +
    "\004\013\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\110\001\001\000\004\013" +
    "\110\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SFCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SFCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SFCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    SFCLex lexer;

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = true;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else {
		// lineFlag == 0
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut



/**
 * <b>CUP: report_fatal_error</b><br>
 * This method should be called whenever a non-recoverable error<br>
 * occurs. It responds by calling report_error(), then aborts<br>
 * parsing by calling the parser method done_parsing(), and<br>
 * finally throws an exception. (In general done_parsing() should<br>
 * be called at any point that parsing needs to be terminated early).<br>
 * @param message <b>contains the error message</b><br>
 * @param object <b>the error object</b><br>
 **/
  public void report_fatal_error(String message, Object info) {
      report_error( message, info );
  } // end of report_fatal_error


/**
 * <b>CUP: report_error</b><br>
 * This method should be called whenever an error message is to be<br>
 * issued. In the default implementation of this method, the first<br>
 * parameter provides the text of a message which is printed on<br>
 * System.err and the second parameter is simply ignored. It is<br>
 * very typical to override this method in order to provide a more<br>
 * sophisticated error reporting mechanism.<br>
 * @param message <b>contains the error message</b><br>
 * @param object <b>the error object</b><br>
 * @throws slime.sfcparser.SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
  public void report_error(String message, Object info) { // not possible in override: throws slime.sfcparser.SFCParseException {
      StringBuffer sbuf = new StringBuffer("SFC Error:");
      if (info instanceof java_cup.runtime.Symbol) {
	  java_cup.runtime.Symbol cupsymbol = ((java_cup.runtime.Symbol) info);
	  if (cupsymbol.left >= 0) {                
                sbuf.append(" in line " + ( cupsymbol.left + 1 ) );   
                if ( cupsymbol.right >= 0 )                    
                    sbuf.append(", at column " + ( cupsymbol.right + 1 ) );
	  } // end if-cupsymbol.left
      } // end if-info
      sbuf.append(" : " + message );
      System.out.println( sbuf.toString() );
      // currently not possible in overridden method: throw new slime.sfcparser.SFCParseException( sbuf.toString() );
  } // end of report_error 
  
/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser as soon as a syntax error<br>
 * is detected (but before error recovery is attempted). In the<br>
 * default implementation it calls: report_error("Syntax error", null);<br>
 * @param Symbol <b>contains the errortoken</b>
 **/
  public void syntax_error(Symbol cur_token) {
      report_error("SYNTAX ERROR", cur_token );
  } // end of syntax_error

  
/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser if it is unable to recover
 * from a syntax error. In the default implementation it calls:
 * report_fatal_error("Couldn't repair and continue parse", null);
 * @param Symbol <b>contains the error token</b>
 **/
  public void unrecovered_syntax_error(Symbol cur_token) {
      done_parsing();       
      report_fatal_error("FATAL PARSING ERROR", cur_token);
  } // end of unrecovered_syntax_error


/*
 * <b>CUP: error_sync_size</b><br>
 * This method is called by the parser to determine how many<br>
 * tokens it must successfully parse in order to consider an error<br>
 * recovery successful. The default implementation returns 3.<br>
 * Values below 2 are not recommended. See the section on<br>
 * error recovery for details.<br>
 * @return 3 <b>the standard size</b>
 **/ 
/*
//  public int error_sync_size() {
//  return 4;
//  } // end of error_sync_size
*/

/** 
 * <b> parseFile </b>
 * @param java.io.File sourcefile - file to parse
 * @return abstract syntax tree with slime.absynt.sfc as root
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.absfc.SFCabtree parseFile(java.io.File sfcfile) throws Exception { // slime.sfcparser.SFCParseException {
	boolean doDebugParse = true;
	FileInputStream FIS = null;
	// Process of parsing a file:
	// create a parsing object
	// SFCParser mySFCParserObj = new SFCParser();
	// open input files, etc. here
	// Symbol myParseTree = null;
  
	// Initialize the Abstract Syntax Tree for the Sequential Function Chart
	slime.absynt.absfc.SFCabtree sfc2 = null;

	try {
	    FIS = new FileInputStream( sfcfile );
	    lexer   = new SFCLex( FIS );
	    setScanner( lexer );
	    if (doDebugParse) {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value;
	    } else {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value; 
	    } // end of if-doDebugParse
	} catch (IOException ioe) {
	  throw ioe;
	} catch (Exception e) {
	    throw e;
	} finally {
	    FIS.close();
	} // end of try-catch
	return sfc2;      
    } // end of parseFile


/** 
 * <b> parseExpression </b>
 * @param java.lang.String sfcexpr - Expression to parse <br>
 * @return slime.absynt.Expr - abstract syntax expression <br>
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.Expr parseExpression(java.lang.String sfcexpr) throws SFCParseException {
	slime.absynt.Expr expr = null;
	try {
	    java.io.StringReader isr = new java.io.StringReader( sfcexpr );
	    pOut(1, "Setting Lexer to SFCLex" );
	    lexer = new SFCLex( isr );
	    setScanner( lexer );
	    pOut(1, "Beginning parsing expression" );
	    expr = (slime.absynt.Expr)parse().value;
	    isr.close();
	} catch (Exception le) {
	    System.out.println("Error parsing expression: "+le.toString());
	    throw new slime.sfcparser.SFCParseException("Error parsing expression");
	} // end try catch
	return expr;
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SFCParser$actions {



    public LinkedList alist = new LinkedList(); /// a list for gathering the statement objects

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = true;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else if (lineFlag==3) {
		System.out.print( outputString );
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut



    
  private final SFCParser parser;

  /** Constructor */
  CUP$SFCParser$actions(SFCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SFCParser$do_action(
    int                        CUP$SFCParser$act_num,
    java_cup.runtime.lr_parser CUP$SFCParser$parser,
    java.util.Stack            CUP$SFCParser$stack,
    int                        CUP$SFCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SFCParser$result;

      /* select the action based on the action number */
      switch (CUP$SFCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= constval 
            {
              slime.absynt.Expr RESULT = null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Constval cv = (slime.absynt.Constval)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = cv; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= var 
            {
              slime.absynt.Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Variable v = (slime.absynt.Variable)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = v; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= op expr 
            {
              slime.absynt.Expr RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
    java.lang.Integer opCode = o;
    int opCodeValue = opCode.intValue();
    RESULT = new slime.absynt.U_expr( opCodeValue, e);

              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr op expr 
            {
              slime.absynt.Expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr l = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr r = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
    java.lang.Integer opCode = o;
    int opCodeValue = opCode.intValue();
    RESULT = new slime.absynt.B_expr( l, opCodeValue, r ); 

              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= LPAREN expr RPAREN 
            {
              slime.absynt.Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 pOut( 3, " ( " ); 
RESULT = e; 
pOut( 3, " ) " ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // constval ::= INTEGER 
            {
              slime.absynt.Constval RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
    pOut( 3, i.toString() ); 
    java.lang.Integer opCode = i;
    int opCodeValue = opCode.intValue();
    System.out.println("before constval-INTEGER-RESULT");
    slime.absynt.Constval cint = new slime.absynt.Constval( opCodeValue );
    System.out.println("after constval-INTEGER-Constval");
    RESULT = cint;  
    System.out.println("after constval-INTEGER-RESULT");

              CUP$SFCParser$result = new java_cup.runtime.Symbol(8/*constval*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constval ::= FALSE 
            {
              slime.absynt.Constval RESULT = null;
		  
    pOut( 3, "false" ); 
    RESULT = new slime.absynt.Constval( false );  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(8/*constval*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constval ::= TRUE 
            {
              slime.absynt.Constval RESULT = null;
		  pOut( 3, "true"); RESULT = new slime.absynt.Constval( true );  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(8/*constval*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var ::= IDENTIFIER 
            {
              slime.absynt.Variable RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 pOut( 3, v ); RESULT = new slime.absynt.Variable( v ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(6/*var*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op ::= NEQ 
            {
              Integer RESULT = null;
		 pOut(3," != ");
       java.lang.Integer opCode = new java.lang.Integer(12);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op ::= GEQ 
            {
              Integer RESULT = null;
		 pOut(3," >= ");
       java.lang.Integer opCode = new java.lang.Integer(11);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op ::= LEQ 
            {
              Integer RESULT = null;
		 pOut(3," <= ");
       java.lang.Integer opCode = new java.lang.Integer(10);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= GT 
            {
              Integer RESULT = null;
		 pOut(3," > ") ;
       java.lang.Integer opCode = new java.lang.Integer(9);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= LT 
            {
              Integer RESULT = null;
		 pOut(3," < ") ;
       java.lang.Integer opCode = new java.lang.Integer(8);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op ::= EQ 
            {
              Integer RESULT = null;
		 pOut(3," == ");
       java.lang.Integer opCode = new java.lang.Integer(7);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op ::= NOT 
            {
              Integer RESULT = null;
		 pOut(3," ! ") ;
       java.lang.Integer opCode = new java.lang.Integer(6);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op ::= OR 
            {
              Integer RESULT = null;
		 pOut(3," || ");
       java.lang.Integer opCode = new java.lang.Integer(5);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op ::= AND 
            {
              Integer RESULT = null;
		 pOut(3," && ");
       java.lang.Integer opCode = new java.lang.Integer(4);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op ::= DIV 
            {
              Integer RESULT = null;
		 pOut(3," / ") ;
       java.lang.Integer opCode = new java.lang.Integer(3);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op ::= SUB 
            {
              Integer RESULT = null;
		 pOut(3," - ") ;
       java.lang.Integer opCode = new java.lang.Integer(1);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op ::= MUL 
            {
              Integer RESULT = null;
		 pOut(3," * ") ;
       java.lang.Integer opCode = new java.lang.Integer(2);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op ::= ADD 
            {
              Integer RESULT = null;
		 pOut(3," + ") ;
       java.lang.Integer opCode = new java.lang.Integer(0);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // vartype ::= BOOLTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.BoolType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vartype ::= INTTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.IntType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // process ::= PROCESS IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.Process RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	       RESULT= new slime.absynt.absfc.Process( 
		            name, (java.util.LinkedList) b
	       ); 
	     
              CUP$SFCParser$result = new java_cup.runtime.Symbol(23/*process*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // processlist ::= process processlist 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.absfc.Process p = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		    LinkedList ll_processlist2 = new LinkedList();
		    ll_processlist2.addLast( p );
		    ll_processlist2.addAll( (java.util.LinkedList) pl );
		    RESULT = ll_processlist2;
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // processlist ::= process 
            {
              LinkedList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.Process p1 = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   LinkedList ll_processlist = new LinkedList();
		   ll_processlist.addLast( p1 );
		   RESULT = ll_processlist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procidlist ::= IDENTIFIER procidlist 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int proclistleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int proclistright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList proclist = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   LinkedList ll_procidlist2 = new LinkedList();
		   ll_procidlist2.addLast( procname );
		   ll_procidlist2.addAll( (java.util.LinkedList) proclist );
		   RESULT=ll_procidlist2; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procidlist ::= IDENTIFIER 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   LinkedList ll_procidlist = new LinkedList();
		   ll_procidlist.addLast( procname );
		   RESULT=ll_procidlist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmtjoin ::= JOIN LPAREN procidlist RPAREN 
            {
              slime.absynt.absfc.StmtJoin RESULT = null;
		int pidlleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pidlright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pidl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	          pOut( 1, " join  " );
		   RESULT = new slime.absynt.absfc.StmtJoin( 
		               (java.util.LinkedList) pidl 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(21/*stmtjoin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmtsplit ::= SPLIT LPSET processlist RPSET 
            {
              slime.absynt.absfc.StmtSplit RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	          pOut( 1, " split  " );
		    RESULT = new slime.absynt.absfc.StmtSplit(
			       (java.util.LinkedList) pl 
		    ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(20/*stmtsplit*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardeclaration ::= vartype IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		      pOut( 1, " declaration " );
		      RESULT = new slime.absynt.absfc.StmtDecl( 
			           new slime.absynt.Variable(vname), 
				   vtype, e );  
                      // bei vartype evtl. non term aendern
		      // falls fuer den checker der echte Type
		      // verlorengeht. Ansonsten in der Absynt
		      // den Typ durch Klassenattribut "merken"
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardeclaration ::= vartype IDENTIFIER SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	  	          pOut( 1, " declaration " );
		   RESULT = new slime.absynt.absfc.StmtDecl( 
		                new slime.absynt.Variable(vname), 
				vtype ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment ::= IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtAssign RESULT = null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	          pOut( 1, " assignment ...  " );
		 RESULT = new slime.absynt.absfc.StmtAssign( 
		     new slime.absynt.Variable(vname), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(12/*assignment*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmtdummy ::= SKIP SEMICOLON 
            {
              slime.absynt.absfc.Comment RESULT = null;
		 
		   RESULT = new slime.absynt.absfc.Comment("nop"); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(22/*stmtdummy*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmtdummy ::= COMMENT 
            {
              slime.absynt.absfc.Comment RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	          pOut( 1, " // comment: "+c );
		   RESULT = new slime.absynt.absfc.Comment( 
		                  (String)c 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(22/*stmtdummy*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtinput ::= INPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtInput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
	          pOut( 1, " input()  " );
		 RESULT = new slime.absynt.absfc.StmtInput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(14/*stmtinput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtoutput ::= OUTPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtOutput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
	           pOut( 1, " output() " );
   		   RESULT = new slime.absynt.absfc.StmtOutput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(15/*stmtoutput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtlooprepeat ::= REPEAT stmtblock UNTIL LPAREN expr RPAREN NT$0 SEMICOLON 
            {
              slime.absynt.absfc.StmtRepeat RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value != null )
                RESULT = (slime.absynt.absfc.StmtRepeat) ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(19/*stmtlooprepeat*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
 pOut( 1, " repeat {b} until (expr) " );
		      RESULT = new slime.absynt.absfc.StmtRepeat( 
			          e, (java.util.LinkedList) b ); 
		    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(26/*NT$0*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtloopwhile ::= WHILE LPAREN expr RPAREN stmtblock SEMICOLON 
            {
              slime.absynt.absfc.StmtWhile RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		   // pOut( 1, " while (expr) {b} " );
		     RESULT = new slime.absynt.absfc.StmtWhile( 
			         e, (java.util.LinkedList) b 
		     ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(18/*stmtloopwhile*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmtifelse ::= IF LPAREN expr RPAREN stmtblock ELSE stmtblock SEMICOLON 
            {
              slime.absynt.absfc.StmtIfElse RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		LinkedList b1 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList b2 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	          pOut( 1, " if (expr) {b1} else {b2}  " );
		   RESULT = new slime.absynt.absfc.StmtIfElse( 
		             e, 
			     (java.util.LinkedList) b1, 
			     (java.util.LinkedList) b2 
		   );
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(17/*stmtifelse*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmtif ::= IF LPAREN expr RPAREN stmtblock SEMICOLON 
            {
              slime.absynt.absfc.StmtIf RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
              pOut( 1, " if (expr) { " );
	      RESULT = new slime.absynt.absfc.StmtIf( 
		            e, (java.util.LinkedList)b 
	      ); 
	    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(16/*stmtif*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtatomic ::= stmtinput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmtatomic ::= stmtoutput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmtatomic ::= assignment 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmtatomic ::= vardeclaration 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= stmtdummy 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= stmtjoin 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= stmtsplit 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= stmtlooprepeat 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= stmtloopwhile 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= stmtifelse 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= stmtif 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= stmtatomic 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmtblock ::= LPSET RPSET 
            {
              LinkedList RESULT = null;
		
	          pOut( 1, " {} // now being within an empty block " );
		   LinkedList ll_stmtblock2 = new LinkedList();
		   ll_stmtblock2.addLast(
		      new slime.absynt.absfc.Comment( "// empty block" ) 
		  );
		  RESULT=ll_stmtblock2;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtblock ::= LPSET stmt RPSET 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	           pOut( 1, " { // now being within a block " );
		   LinkedList ll_stmtblock = new LinkedList();
		   ll_stmtblock.add(l);
		   RESULT=ll_stmtblock; 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmtblock ::= LPSET stmtlist RPSET 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	           pOut( 1, " { // now being within a block " );
		   RESULT=l; 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmtlist ::= stmt stmtlist 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
		  pOut( 1, " // processing the head-stmt of a stmtlist " );
		  LinkedList ll_stmtlist2 = new LinkedList();
		  ll_stmtlist2.addLast( s );
		  ll_stmtlist2.addAll( (java.util.LinkedList) sl );
		  RESULT=ll_stmtlist2;  
	      
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtlist ::= stmt 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
	       pOut( 1, " // processing a single stmt of a stmtlist " );
	       LinkedList ll_stmtlist = new LinkedList();
	       ll_stmtlist.addLast( s );
	       RESULT=ll_stmtlist;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sfcprogram ::= SFCPRG IDENTIFIER LPSET stmt SEMICOLON stmtlist RPSET 
            {
              slime.absynt.absfc.SFCabtree RESULT = null;
		int prognameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).left;
		int prognameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).right;
		String progname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList b2 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		   pOut( 1, progname+" { // now SFC program begins " );
		    java.util.LinkedList blist = new java.util.LinkedList();
		    blist.add(b1);blist.addAll(b2);
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)blist ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(4/*sfcprogram*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sfcprogram ::= SFCPRG IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.SFCabtree RESULT = null;
		int prognameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int prognameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String progname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   pOut( 1, progname+" { // now SFC program begins " );
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)b ); 
		 pOut( 1, " }");
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(4/*sfcprogram*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sfcbegin ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
			
             RESULT = (slime.absynt.Expr)e;  
	     pOut( 1, "\n was a correct SFC-Expression \n" );	   
	 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sfcbegin ::= sfcprogram 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.SFCabtree p = (slime.absynt.absfc.SFCabtree)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
	     pOut( 1, "SFC " );
	     RESULT = p;  
	 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sfcbegin EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		RESULT = start_val;
              CUP$SFCParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SFCParser$parser.done_parsing();
          return CUP$SFCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

