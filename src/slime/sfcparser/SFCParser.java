
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Thu Jun 27 16:30:53 GMT 2002
//----------------------------------------------------

package slime.sfcparser;

import java_cup.runtime.*;
import java_cup.*;
import java.io.*;
import java.util.*;
import java.lang.String;

/** CUP v0.10j generated parser.
  * @version Thu Jun 27 16:30:53 GMT 2002
  */
public class SFCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SFCParser() {super();}

  /** Constructor which sets the default scanner. */
  public SFCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\006\005\000\002\006\011\000\002\014\003" +
    "\000\002\014\004\000\002\015\005\000\002\015\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\022\007\000" +
    "\002\023\013\000\002\024\007\000\002\034\002\000\002" +
    "\025\012\000\002\021\011\000\002\020\011\000\002\030" +
    "\003\000\002\030\004\000\002\016\006\000\002\017\005" +
    "\000\002\017\007\000\002\026\006\000\002\027\006\000" +
    "\002\033\003\000\002\033\004\000\002\032\003\000\002" +
    "\032\004\000\002\031\005\000\002\011\003\000\002\011" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\010\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\050\005\012\006\027\007\023\010\020\011" +
    "\034\012\022\013\005\014\010\015\011\016\014\022\006" +
    "\023\015\024\026\025\004\026\025\027\033\032\013\033" +
    "\024\044\032\001\002\000\046\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\032\uffcc\033\uffcc\001\002\000\046\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\032\uffd3\033\uffd3\001\002\000\046\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\032\uffcf\033\uffcf\001\002\000\036\002\uffff\007" +
    "\023\010\020\011\034\012\022\013\005\014\010\015\011" +
    "\022\006\023\015\024\026\025\004\026\025\027\033\001" +
    "\002\000\046\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\032\uffd2\033\uffd2" +
    "\001\002\000\046\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\032\uffd1\033" +
    "\uffd1\001\002\000\042\002\uffca\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\001\002" +
    "\000\042\002\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\031\uffc9\001\002\000\046\005" +
    "\012\006\027\007\023\010\020\011\034\012\022\013\005" +
    "\014\010\015\011\016\014\022\006\023\015\024\026\025" +
    "\004\026\025\027\033\032\013\033\024\001\002\000\046" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\032\uffce\033\uffce\001\002\000" +
    "\046\005\012\006\027\007\023\010\020\011\034\012\022" +
    "\013\005\014\010\015\011\016\014\022\006\023\015\024" +
    "\026\025\004\026\025\027\033\032\013\033\024\001\002" +
    "\000\004\002\000\001\002\000\046\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\032\uffd5\033\uffd5\001\002\000\042\002\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\031\uffc2\001\002\000\046\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\032" +
    "\uffd4\033\uffd4\001\002\000\046\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\032\uffd7\033\uffd7\001\002\000\042\002\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\001\002\000\046\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\032\uffd0" +
    "\033\uffd0\001\002\000\046\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\032" +
    "\uffcd\033\uffcd\001\002\000\042\002\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7" +
    "\001\002\000\004\002\173\001\002\000\042\002\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\031\uffc3\001\002\000\004\005\035\001\002\000\046" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\032\uffcb\033\uffcb\001\002\000" +
    "\046\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\032\uffd6\033\uffd6\001\002" +
    "\000\004\020\037\001\002\000\004\002\ufffe\001\002\000" +
    "\034\005\051\021\043\034\041\035\063\037\073\040\050" +
    "\041\067\043\056\045\052\047\045\050\042\051\066\052" +
    "\070\001\002\000\036\005\ufff0\021\ufff0\031\ufff0\034\ufff0" +
    "\035\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0\045\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\001\002\000\004\005\uffd9" +
    "\001\002\000\004\016\165\001\002\000\044\002\ufff9\005" +
    "\ufff9\021\ufff9\031\ufff9\034\ufff9\035\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\045\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\001\002\000\036\005\ufff8\021\ufff8" +
    "\031\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\043" +
    "\ufff8\045\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\001\002" +
    "\000\004\016\161\001\002\000\036\005\ufff5\021\ufff5\031" +
    "\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5" +
    "\045\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\001\002\000" +
    "\004\005\154\001\002\000\004\020\144\001\002\000\004" +
    "\036\141\001\002\000\004\016\130\001\002\000\036\005" +
    "\uffed\021\uffed\031\uffed\034\uffed\035\uffed\037\uffed\040\uffed" +
    "\041\uffed\043\uffed\045\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\001\002\000\036\005\ufff2\021\ufff2\031\ufff2\034\ufff2" +
    "\035\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\045\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\001\002\000\036\005\ufff3" +
    "\021\ufff3\031\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\001\002\000\036\005\uffe5\021\uffe5\031\uffe5\034\uffe5\035" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\045\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\001\002\000\036\005\ufff7\021" +
    "\ufff7\031\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\043\ufff7\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\001" +
    "\002\000\036\005\uffee\021\uffee\031\uffee\034\uffee\035\uffee" +
    "\037\uffee\040\uffee\041\uffee\043\uffee\045\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\001\002\000\036\005\uffef\021\uffef" +
    "\031\uffef\034\uffef\035\uffef\037\uffef\040\uffef\041\uffef\043" +
    "\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\001\002" +
    "\000\004\021\127\001\002\000\004\005\uffd8\001\002\000" +
    "\036\005\ufff6\021\ufff6\031\ufff6\034\ufff6\035\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\043\ufff6\045\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\001\002\000\036\005\ufff4\021\ufff4\031\ufff4" +
    "\034\ufff4\035\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\045" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\001\002\000\004" +
    "\016\121\001\002\000\004\016\114\001\002\000\004\020" +
    "\103\001\002\000\036\005\ufff1\021\ufff1\031\ufff1\034\ufff1" +
    "\035\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\045\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\001\002\000\036\005\051" +
    "\021\ufffc\031\075\034\041\035\063\037\073\040\050\041" +
    "\067\043\056\045\052\047\045\050\042\051\066\052\070" +
    "\001\002\000\004\031\074\001\002\000\036\005\uffe4\021" +
    "\uffe4\031\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\043\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\001" +
    "\002\000\032\005\051\034\041\035\063\037\073\040\050" +
    "\041\067\043\056\045\052\047\045\050\042\051\066\052" +
    "\070\001\002\000\004\021\ufffb\001\002\000\034\005\051" +
    "\021\ufffc\034\041\035\063\037\073\040\050\041\067\043" +
    "\056\045\052\047\045\050\042\051\066\052\070\001\002" +
    "\000\004\021\101\001\002\000\004\002\ufffd\001\002\000" +
    "\004\053\104\001\002\000\034\005\051\021\043\034\041" +
    "\035\063\037\073\040\050\041\067\043\056\045\052\047" +
    "\045\050\042\051\066\052\070\001\002\000\004\016\105" +
    "\001\002\000\046\005\012\006\027\007\023\010\020\011" +
    "\034\012\022\013\005\014\010\015\011\016\014\022\006" +
    "\023\015\024\026\025\004\026\025\027\033\032\013\033" +
    "\024\001\002\000\036\007\023\010\020\011\034\012\022" +
    "\013\005\014\010\015\011\017\110\022\006\023\015\024" +
    "\026\025\004\026\025\027\033\001\002\000\046\005\012" +
    "\006\027\007\023\010\020\011\034\012\022\013\005\014" +
    "\010\015\011\016\014\022\006\023\015\024\026\025\004" +
    "\026\025\027\033\032\013\033\024\001\002\000\004\031" +
    "\uffe9\001\002\000\004\031\112\001\002\000\036\005\uffe8" +
    "\021\uffe8\031\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\043\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\001\002\000\042\002\uffc5\007\023\010\020\011\034\012" +
    "\022\013\005\014\010\015\011\017\uffc5\022\006\023\015" +
    "\024\026\025\004\026\025\027\033\031\uffc5\001\002\000" +
    "\004\005\115\001\002\000\006\005\115\017\uffde\001\002" +
    "\000\004\017\117\001\002\000\036\005\uffdf\021\uffdf\031" +
    "\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf" +
    "\045\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000" +
    "\004\017\uffdd\001\002\000\004\005\122\001\002\000\004" +
    "\030\123\001\002\000\046\005\012\006\027\007\023\010" +
    "\020\011\034\012\022\013\005\014\010\015\011\016\014" +
    "\022\006\023\015\024\026\025\004\026\025\027\033\032" +
    "\013\033\024\001\002\000\036\007\023\010\020\011\034" +
    "\012\022\013\005\014\010\015\011\017\125\022\006\023" +
    "\015\024\026\025\004\026\025\027\033\001\002\000\004" +
    "\031\126\001\002\000\036\005\uffe7\021\uffe7\031\uffe7\034" +
    "\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\045\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\001\002\000\044\002" +
    "\ufffa\005\ufffa\021\ufffa\031\ufffa\034\ufffa\035\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\046\005\012" +
    "\006\027\007\023\010\020\011\034\012\022\013\005\014" +
    "\010\015\011\016\014\022\006\023\015\024\026\025\004" +
    "\026\025\027\033\032\013\033\024\001\002\000\036\007" +
    "\023\010\020\011\034\012\022\013\005\014\010\015\011" +
    "\017\132\022\006\023\015\024\026\025\004\026\025\027" +
    "\033\001\002\000\004\020\134\001\002\000\036\005\uffec" +
    "\021\uffec\031\uffec\034\uffec\035\uffec\037\uffec\040\uffec\041" +
    "\uffec\043\uffec\045\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\001\002\000\034\005\051\021\043\034\041\035\063\037" +
    "\073\040\050\041\067\043\056\045\052\047\045\050\042" +
    "\051\066\052\070\001\002\000\004\021\136\001\002\000" +
    "\040\005\ufffa\021\ufffa\031\ufffa\034\ufffa\035\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\043\ufffa\045\ufffa\046\137\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\001\002\000\004\020\103\001\002" +
    "\000\036\005\uffeb\021\uffeb\031\uffeb\034\uffeb\035\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\043\uffeb\045\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\001\002\000\046\005\012\006\027\007" +
    "\023\010\020\011\034\012\022\013\005\014\010\015\011" +
    "\016\014\022\006\023\015\024\026\025\004\026\025\027" +
    "\033\032\013\033\024\001\002\000\036\007\023\010\020" +
    "\011\034\012\022\013\005\014\010\015\011\022\006\023" +
    "\015\024\026\025\004\026\025\027\033\031\143\001\002" +
    "\000\036\005\uffe3\021\uffe3\031\uffe3\034\uffe3\035\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\043\uffe3\045\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\001\002\000\004\042\146\001\002\000" +
    "\004\021\153\001\002\000\004\005\151\001\002\000\006" +
    "\021\uffdc\042\146\001\002\000\004\021\uffdb\001\002\000" +
    "\004\020\103\001\002\000\006\021\uffda\042\uffda\001\002" +
    "\000\036\005\uffe0\021\uffe0\031\uffe0\034\uffe0\035\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\043\uffe0\045\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\001\002\000\006\031\155\036\156\001" +
    "\002\000\036\005\uffe2\021\uffe2\031\uffe2\034\uffe2\035\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\043\uffe2\045\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\001\002\000\046\005\012\006\027" +
    "\007\023\010\020\011\034\012\022\013\005\014\010\015" +
    "\011\016\014\022\006\023\015\024\026\025\004\026\025" +
    "\027\033\032\013\033\024\001\002\000\036\007\023\010" +
    "\020\011\034\012\022\013\005\014\010\015\011\022\006" +
    "\023\015\024\026\025\004\026\025\027\033\031\160\001" +
    "\002\000\036\005\uffe1\021\uffe1\031\uffe1\034\uffe1\035\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\043\uffe1\045\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\001\002\000\046\005\012\006\027" +
    "\007\023\010\020\011\034\012\022\013\005\014\010\015" +
    "\011\016\014\022\006\023\015\024\026\025\004\026\025" +
    "\027\033\032\013\033\024\001\002\000\036\007\023\010" +
    "\020\011\034\012\022\013\005\014\010\015\011\017\163" +
    "\022\006\023\015\024\026\025\004\026\025\027\033\001" +
    "\002\000\004\020\103\001\002\000\036\005\uffea\021\uffea" +
    "\031\uffea\034\uffea\035\uffea\037\uffea\040\uffea\041\uffea\043" +
    "\uffea\045\uffea\047\uffea\050\uffea\051\uffea\052\uffea\001\002" +
    "\000\004\005\166\001\002\000\004\030\167\001\002\000" +
    "\046\005\012\006\027\007\023\010\020\011\034\012\022" +
    "\013\005\014\010\015\011\016\014\022\006\023\015\024" +
    "\026\025\004\026\025\027\033\032\013\033\024\001\002" +
    "\000\036\007\023\010\020\011\034\012\022\013\005\014" +
    "\010\015\011\017\171\022\006\023\015\024\026\025\004" +
    "\026\025\027\033\001\002\000\004\031\172\001\002\000" +
    "\036\005\uffe6\021\uffe6\031\uffe6\034\uffe6\035\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\043\uffe6\045\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\001\002\000\004\002\001\001\002\000\042" +
    "\002\uffc4\007\023\010\020\011\034\012\022\013\005\014" +
    "\010\015\011\017\uffc4\022\006\023\015\024\026\025\004" +
    "\026\025\027\033\031\uffc4\001\002\000\036\007\023\010" +
    "\020\011\034\012\022\013\005\014\010\015\011\017\176" +
    "\022\006\023\015\024\026\025\004\026\025\027\033\001" +
    "\002\000\042\002\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\017\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\016\003\027\006\016\007\006\010\030\012" +
    "\020\013\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\174\010\030\012\020\013\015\001\001\000" +
    "\002\001\001\000\012\007\173\010\030\012\020\013\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\035\001\001\000" +
    "\002\001\001\000\040\004\071\005\043\011\046\014\061" +
    "\016\060\017\037\020\052\021\057\022\056\023\063\024" +
    "\045\025\064\026\054\027\053\030\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\101\001\001\000\002\001\001" +
    "\000\040\004\076\005\043\011\046\014\075\016\060\017" +
    "\037\020\052\021\057\022\056\023\063\024\045\025\064" +
    "\026\054\027\053\030\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\076\005\043\011\046\014\077" +
    "\016\060\017\037\020\052\021\057\022\056\023\063\024" +
    "\045\025\064\026\054\027\053\030\070\001\001\000\002" +
    "\001\001\000\040\004\076\005\043\011\046\014\075\016" +
    "\060\017\037\020\052\021\057\022\056\023\063\024\045" +
    "\025\064\026\054\027\053\030\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\076" +
    "\005\043\011\046\014\061\016\060\017\037\020\052\021" +
    "\057\022\056\023\063\024\045\025\064\026\054\027\053" +
    "\030\070\001\001\000\002\001\001\000\012\007\105\010" +
    "\030\012\020\013\015\001\001\000\004\013\106\001\001" +
    "\000\012\007\112\010\030\012\020\013\015\001\001\000" +
    "\004\034\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\106\001\001\000\004\033\115\001\001\000" +
    "\004\033\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\123\010\030\012\020\013\015\001\001\000\004" +
    "\013\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\130\010\030\012\020\013\015" +
    "\001\001\000\004\013\106\001\001\000\004\015\132\001" +
    "\001\000\002\001\001\000\040\004\076\005\043\011\046" +
    "\014\134\016\060\017\037\020\052\021\057\022\056\023" +
    "\063\024\045\025\064\026\054\027\053\030\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\137\001" +
    "\001\000\002\001\001\000\012\007\141\010\030\012\020" +
    "\013\015\001\001\000\004\013\106\001\001\000\002\001" +
    "\001\000\006\031\146\032\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\146\032\147\001\001\000" +
    "\002\001\001\000\004\015\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\156\010\030\012\020\013\015\001\001\000\004" +
    "\013\106\001\001\000\002\001\001\000\012\007\161\010" +
    "\030\012\020\013\015\001\001\000\004\013\106\001\001" +
    "\000\004\015\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\167\010\030\012\020" +
    "\013\015\001\001\000\004\013\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\106" +
    "\001\001\000\004\013\106\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SFCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SFCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SFCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    SFCLex lexer;

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = true;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else {
		// lineFlag == 0
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut



/*
 * <b>CUP: report_fatal_error</b><br>
 * This method should be called whenever a non-recoverable error<br>
 * occurs. It responds by calling report_error(), then aborts<br>
 * parsing by calling the parser method done_parsing(), and<br>
 * finally throws an exception. (In general done_parsing() should<br>
 * be called at any point that parsing needs to be terminated early).<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void report_fatal_error(String message, Object info) throws SFCParseException {
  System.err.println( message );
  throw new SFCParseException( message );
  } // end of report_fatal_error
*/

/*
 * <b>CUP: report_error</b><br>
 * This method should be called whenever an error message is to be<br>
 * issued. In the default implementation of this method, the first<br>
 * parameter provides the text of a message which is printed on<br>
 * System.err and the second parameter is simply ignored. It is<br>
 * very typical to override this method in order to provide a more<br>
 * sophisticated error reporting mechanism.<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void report_error(String message, Object info) {
  System.err.println( "SFC Parser: " + message );
  } // end of report_error 
*/  

/*
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser as soon as a syntax error<br>
 * is detected (but before error recovery is attempted). In the<br>
 * default implementation it calls: report_error("Syntax error", null);<br>
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void syntax_error(Symbol cur_token) {
  report_error("SFC Parser : SYNTAX ERROR - current symbol: " + cur_token, null );
  } // end of syntax_error
*/
  
/*
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser if it is unable to recover
 * from a syntax error. In the default implementation it calls:
 * report_fatal_error("Couldn't repair and continue parse", null);
 * @param message <b>contains the error message</b>
 * @throws SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
/*
  protected void unrecovered_syntax_error(Symbol cur_token) throws SFCParseException {
  done_parsing();       
  report_fatal_error("SFC Parser : FATAL PARSING ERROR", null);
  } // end of unrecovered_syntax_error
*/

/*
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser to determine how many<br>
 * tokens it must successfully parse in order to consider an error<br>
 * recovery successful. The default implementation returns 3.<br>
 * Values below 2 are not recommended. See the section on<br>
 * error recovery for details.<br>
 * @return 3 <b>the standard size</b>
 **/ 
/*
//  protected int error_sync_size() {
//  return 9;
//  } // end of error_sync_size
*/

/** 
 * <b> parseFile </b>
 * @param java.io.File sourcefile - file to parse
 * @return abstract syntax tree with slime.absynt.sfc as root
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.absfc.SFCabtree parseFile(java.io.File sfcfile) throws Exception { // slime.sfcparser.SFCParseException {
	boolean doDebugParse = true;
	FileInputStream FIS = null;
	// Process of parsing a file:
	// create a parsing object
	// SFCParser mySFCParserObj = new SFCParser();
	// open input files, etc. here
	// Symbol myParseTree = null;
  
	// Initialize the Abstract Syntax Tree for the Sequential Function Chart
	slime.absynt.absfc.SFCabtree sfc2 = null;

	try {
	    FIS = new FileInputStream( sfcfile );
	    lexer   = new SFCLex( FIS );
	    setScanner( lexer );
	    if (doDebugParse) {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value;
	    } else {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value; 
	    } // end of if-doDebugParse
	} catch (IOException ioe) {
	  throw ioe;
	} catch (Exception e) {
	    throw e;
	} finally {
	    FIS.close();
	} // end of try-catch
	return sfc2;      
    } // end of parseFile


/** 
 * <b> parseExpression </b>
 * @param java.lang.String sfcexpr - Expression to parse <br>
 * @return slime.absynt.Expr - abstract syntax expression <br>
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.Expr parseExpression(java.lang.String sfcexpr) throws SFCParseException {
	slime.absynt.Expr expr = null;
	try {
	    java.io.StringReader isr = new java.io.StringReader( sfcexpr );
	    pOut(1, "Setting Lexer to SFCLex" );
	    lexer = new SFCLex( isr );
	    setScanner( lexer );
	    pOut(1, "Beginning parsing expression" );
	    expr = (slime.absynt.Expr)parse().value;
	    isr.close();
	} catch (Exception le) {
	    System.out.println("Error parsing expression: "+le.toString());
	    throw new slime.sfcparser.SFCParseException("Error parsing expression");
	} // end try catch
	return expr;
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SFCParser$actions {



    public LinkedList alist = new LinkedList(); /// a list for gathering the statement objects

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = true;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else if (lineFlag==3) {
		System.out.print( outputString );
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut



    
  private final SFCParser parser;

  /** Constructor */
  CUP$SFCParser$actions(SFCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SFCParser$do_action(
    int                        CUP$SFCParser$act_num,
    java_cup.runtime.lr_parser CUP$SFCParser$parser,
    java.util.Stack            CUP$SFCParser$stack,
    int                        CUP$SFCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SFCParser$result;

      /* select the action based on the action number */
      switch (CUP$SFCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= constval 
            {
              slime.absynt.Expr RESULT = null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Constval cv = (slime.absynt.Constval)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = cv; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= var 
            {
              slime.absynt.Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Variable v = (slime.absynt.Variable)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 RESULT = v; 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= op expr 
            {
              slime.absynt.Expr RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
RESULT = new slime.absynt.U_expr( ((java.lang.Integer)o).intValue(), e); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr op expr 
            {
              slime.absynt.Expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr l = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr r = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
RESULT = new slime.absynt.B_expr( l, ((java.lang.Integer)o).intValue(), r ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= LPAREN expr RPAREN 
            {
              slime.absynt.Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 pOut( 3, " ( " ); 
RESULT = e; 
pOut( 3, " ) " ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constval ::= INTEGER 
            {
              slime.absynt.Constval RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  pOut( 3, i.toString() ); RESULT = new slime.absynt.Constval( i.intValue() );  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(8/*constval*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constval ::= FALSE 
            {
              slime.absynt.Constval RESULT = null;
		  pOut( 3, "false" ); RESULT = new slime.absynt.Constval( false );  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(8/*constval*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // constval ::= TRUE 
            {
              slime.absynt.Constval RESULT = null;
		  pOut( 3, "true"); RESULT = new slime.absynt.Constval( true );  
              CUP$SFCParser$result = new java_cup.runtime.Symbol(8/*constval*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var ::= IDENTIFIER 
            {
              slime.absynt.Variable RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 pOut( 3, v ); RESULT = new slime.absynt.Variable( v ); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(6/*var*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op ::= NEQ 
            {
              Integer RESULT = null;
		 pOut(3," != ");RESULT=new Integer(12); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op ::= GEQ 
            {
              Integer RESULT = null;
		 pOut(3," >= ");RESULT=new Integer(11); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= LEQ 
            {
              Integer RESULT = null;
		 pOut(3," <= ");RESULT=new Integer(10); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= GT 
            {
              Integer RESULT = null;
		 pOut(3," > ") ;RESULT=new Integer(9); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op ::= LT 
            {
              Integer RESULT = null;
		 pOut(3," < ") ;RESULT=new Integer(8); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op ::= EQ 
            {
              Integer RESULT = null;
		 pOut(3," == ");RESULT=new Integer(7); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op ::= NOT 
            {
              Integer RESULT = null;
		 pOut(3," ! ") ;RESULT=new Integer(6); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op ::= OR 
            {
              Integer RESULT = null;
		 pOut(3," || ");RESULT=new Integer(5); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op ::= AND 
            {
              Integer RESULT = null;
		 pOut(3," && ");RESULT=new Integer(4); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op ::= DIV 
            {
              Integer RESULT = null;
		 pOut(3," / ") ;RESULT=new Integer(3); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op ::= SUB 
            {
              Integer RESULT = null;
		 pOut(3," - ") ;RESULT=new Integer(1); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op ::= MUL 
            {
              Integer RESULT = null;
		 pOut(3," * ") ;RESULT=new Integer(2); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op ::= ADD 
            {
              Integer RESULT = null;
		 pOut(3," + ") ;RESULT=new Integer(0); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(9/*op*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vartype ::= BOOLTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.BoolType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vartype ::= INTTYPE 
            {
              slime.absynt.Type RESULT = null;
		 RESULT = new slime.absynt.IntType(); 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(7/*vartype*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // process ::= PROCESS IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.Process RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	       RESULT= new slime.absynt.absfc.Process( 
		            name, (java.util.LinkedList) b
	       ); 
	     
              CUP$SFCParser$result = new java_cup.runtime.Symbol(23/*process*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // processlist ::= process processlist 
            {
              LinkedList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.absfc.Process p = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		  alist.clear();
		  alist.addLast( p );
		  alist.addAll( (java.util.LinkedList) pl );
		  RESULT = alist;
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // processlist ::= process 
            {
              LinkedList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.Process p1 = (slime.absynt.absfc.Process)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   alist.clear();
		   alist.addLast( p1 );
		   RESULT = alist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(24/*processlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procidlist ::= IDENTIFIER procidlist 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int proclistleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int proclistright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList proclist = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		  alist.clear();
		  alist.addLast( procname );
		  alist.addAll( (java.util.LinkedList) proclist );
		  RESULT = alist;
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procidlist ::= IDENTIFIER 
            {
              LinkedList RESULT = null;
		int procnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int procnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		String procname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   alist.clear();
		   alist.addLast( procname );
		   RESULT=alist; 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(25/*procidlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmtjoin ::= JOIN LPAREN procidlist RPAREN 
            {
              slime.absynt.absfc.StmtJoin RESULT = null;
		int pidlleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int pidlright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pidl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	          pOut( 1, " join  " );
		   RESULT = new slime.absynt.absfc.StmtJoin( 
		               (java.util.LinkedList) pidl 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(21/*stmtjoin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmtsplit ::= SPLIT LPSET processlist RPSET 
            {
              slime.absynt.absfc.StmtSplit RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList pl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	          pOut( 1, " split  " );
		    RESULT = new slime.absynt.absfc.StmtSplit(
			       (java.util.LinkedList) pl 
		    ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(20/*stmtsplit*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardeclaration ::= vartype IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		      pOut( 1, " declaration " );
		      RESULT = new slime.absynt.absfc.StmtDecl( 
			           new slime.absynt.Variable(vname), 
				   (slime.absynt.Type)vtype, e );  
                      // bei vartype evtl. non term aendern
		      // falls fuer den checker der echte Type
		      // verlorengeht. Ansonsten in der Absynt
		      // den Typ durch Klassenattribut "merken"
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardeclaration ::= vartype IDENTIFIER SEMICOLON 
            {
              slime.absynt.absfc.StmtDecl RESULT = null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Type vtype = (slime.absynt.Type)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	  	          pOut( 1, " declaration " );
		   RESULT = new slime.absynt.absfc.StmtDecl( 
		                new slime.absynt.Variable(vname), 
				(slime.absynt.Type)vtype ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(13/*vardeclaration*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= IDENTIFIER ASSIGN expr SEMICOLON 
            {
              slime.absynt.absfc.StmtAssign RESULT = null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	          pOut( 1, " assignment ...  " );
		 RESULT = new slime.absynt.absfc.StmtAssign( 
		     new slime.absynt.Variable(vname), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(12/*assignment*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmtdummy ::= SKIP SEMICOLON 
            {
              slime.absynt.absfc.Comment RESULT = null;
		 
		   RESULT = new slime.absynt.absfc.Comment("nop"); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(22/*stmtdummy*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtdummy ::= COMMENT 
            {
              slime.absynt.absfc.Comment RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	          pOut( 1, " // comment: "+c );
		   RESULT = new slime.absynt.absfc.Comment( 
		                  (String)c 
		   ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(22/*stmtdummy*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtinput ::= INPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtInput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
	          pOut( 1, " input()  " );
		 RESULT = new slime.absynt.absfc.StmtInput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(14/*stmtinput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtoutput ::= OUTPUT LPAREN IDENTIFIER COMMA expr RPAREN SEMICOLON 
            {
              slime.absynt.absfc.StmtOutput RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		 
	           pOut( 1, " output() " );
   		   RESULT = new slime.absynt.absfc.StmtOutput( 
		              new slime.absynt.Variable(name), e ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(15/*stmtoutput*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtlooprepeat ::= REPEAT stmtblock UNTIL LPAREN expr RPAREN NT$0 SEMICOLON 
            {
              slime.absynt.absfc.StmtRepeat RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value != null )
                RESULT = (slime.absynt.absfc.StmtRepeat) ((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(19/*stmtlooprepeat*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
 pOut( 1, " repeat {b} until (expr) " );
		      RESULT = new slime.absynt.absfc.StmtRepeat( 
			          e, (java.util.LinkedList) b ); 
		    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(26/*NT$0*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmtloopwhile ::= WHILE LPAREN expr RPAREN stmtblock 
            {
              slime.absynt.absfc.StmtWhile RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		      pOut( 1, " while (expr) { " );
		     RESULT = new slime.absynt.absfc.StmtWhile( 
			         e, (java.util.LinkedList) b 
		     ); 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(18/*stmtloopwhile*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmtifelse ::= IF LPAREN expr RPAREN LPSET stmtlist RPSET ELSE stmtblock 
            {
              slime.absynt.absfc.StmtIfElse RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		LinkedList b1 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b2 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
	          pOut( 1, " if (expr) {b1} else {b2}  " );
		   RESULT = new slime.absynt.absfc.StmtIfElse( 
		             e, 
			     (java.util.LinkedList) b1, 
			     (java.util.LinkedList) b2 
		   );
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(17/*stmtifelse*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtif ::= IF LPAREN expr RPAREN stmtblock 
            {
              slime.absynt.absfc.StmtIf RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
              pOut( 1, " if (expr) { " );
	      RESULT = new slime.absynt.absfc.StmtIf( 
		            e, (java.util.LinkedList)b 
	      ); 
	    
              CUP$SFCParser$result = new java_cup.runtime.Symbol(16/*stmtif*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmtatomic ::= stmtinput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmtatomic ::= stmtoutput 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmtatomic ::= assignment 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmtatomic ::= vardeclaration 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(3/*stmtatomic*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= stmtdummy 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= stmtjoin 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= stmtsplit 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= stmtlooprepeat 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= stmtloopwhile 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= stmtifelse 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= stmtif 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= stmtatomic 
            {
              Object RESULT = null;

              CUP$SFCParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtblock ::= LPSET RPSET 
            {
              LinkedList RESULT = null;
		
	          pOut( 1, " {} // now being within an empty block " );
		  alist.clear();
		  alist.addLast(
		      new slime.absynt.absfc.Comment( "// empty block" ) 
		  );
		  RESULT=alist;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmtblock ::= LPSET stmtlist RPSET 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
	           pOut( 1, " { // now being within a block " );
		   RESULT=l; 
		   
              CUP$SFCParser$result = new java_cup.runtime.Symbol(11/*stmtblock*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmtlist ::= stmt stmtlist 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
  	        pOut( 1, " // processing the head-stmt of a stmtlist " );
		  alist.clear();
		  alist.addLast(s);
		  alist.addAll( (java.util.LinkedList)sl);
		  RESULT=alist;  
	      
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmtlist ::= stmt 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
	        pOut( 1, " // processing a single stmt of a stmtlist " );
	        alist.clear();
	        alist.addLast( s );
	        RESULT=alist;
	       
              CUP$SFCParser$result = new java_cup.runtime.Symbol(10/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sfcprogram ::= SFCPRG IDENTIFIER LPSET stmt SEMICOLON stmtlist RPSET 
            {
              slime.absynt.absfc.SFCabtree RESULT = null;
		int prognameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).left;
		int prognameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).right;
		String progname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		LinkedList b2 = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		 
		   pOut( 1, progname+" { // now SFC program begins " );
		    java.util.LinkedList blist = new java.util.LinkedList();
		    blist.add(b1);blist.addAll(b2);
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)blist ); 
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(4/*sfcprogram*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sfcprogram ::= SFCPRG IDENTIFIER stmtblock 
            {
              slime.absynt.absfc.SFCabtree RESULT = null;
		int prognameleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int prognameright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		String progname = (String)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		LinkedList b = (LinkedList)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		 
		   pOut( 1, progname+" { // now SFC program begins " );
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)b ); 
		 pOut( 1, " }");
		 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(4/*sfcprogram*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sfcbegin ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.Expr e = (slime.absynt.Expr)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
			
	     pOut( 1, "SFC-Expression" );	   
             RESULT = (slime.absynt.Expr)e;  
	 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sfcbegin ::= sfcprogram 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right;
		slime.absynt.absfc.SFCabtree p = (slime.absynt.absfc.SFCabtree)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).value;
		  
	     pOut( 1, "SFC " );
	     RESULT = p;  
	 
              CUP$SFCParser$result = new java_cup.runtime.Symbol(1/*sfcbegin*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          return CUP$SFCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sfcbegin EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).value;
		RESULT = start_val;
              CUP$SFCParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SFCParser$stack.elementAt(CUP$SFCParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SFCParser$parser.done_parsing();
          return CUP$SFCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

