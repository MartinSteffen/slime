/**
 * CUP Grammar specification for the SFC Parser
 *
 * offered methods: - parseFile
 *		    - parseExpression
 *		    - 
 * The specification consists of the following parts:
 *    -  initialial declarations
 *	 - init with
 *	 - scan with
 *	 - action code
 *	 - parser code 
 *    -  terminals and non-terminals
 *    -  precedence, associativity
 *    -  grammar definition
 *
 * @author initialy provided by Marco Wendel
 * @version $Id: SFC.cup,v 1.11 2002-07-02 12:29:48 swprakt Exp $
 *
 */
/* Changelog:
 * $Log: not supported by cvs2svn $
 * Revision 1.10  2002/06/29 21:23:07  swprakt
 * Finally I provide my fully functioning JLex.jar
 * and java_cup.jar. The files were created on
 * october 30. 2000. These are the latest versions
 * that can be obtained from the internet.
 *
 * Revision 1.9  2002/06/28 08:03:12  swprakt
 * old versions did conflict with "global" Makefile
 * in src/slime, albeight the GLOBAL Makefile should
 * exist in src. (mwe)
 *
 * Revision 1.8  2002/06/27 20:20:18  swprakt
 * The SFCSymbols.EOF symbol has is an int with value 0.
 * The YYlex.EOF is a symbol with int value -1.
 * SFCParser now correctly parses 1+1, 7*8.. (mwe)
 *
 * Revision 1.7  2002/06/27 19:39:36  swprakt
 * slightly improved exceptionhandling
 *
 * Revision 1.6  2002/06/27 14:30:57  swprakt
 * tried to remove Error 19: "_public ugliness",
 * now header comments consist of two parts, one
 * for javadoc and one containing CVS Versio log.
 *
 * Revision 1.5  2002/06/26 10:39:48  swprakt
 * yy_eof muss nun noch irgendwie behandelt werden...
 *
 * Revision 1.4  2002/06/26 09:19:33  swprakt
 * Debug die 1.: von einer Expression 1+1 parst er nur
 * 1+ korrekt, danach Abbruch
 *
 * Revision 1.3  2002/06/26 08:27:04  swprakt
 * neues Makefile, JLex jetzt in Slime/src/JLex,
 * von wo aus es beim kompilieren auch aufgerufen
 * wird.
 *
 * CVS ----------------------------------------------------------------------
 *
 * Revision 1.2  2002/06/26 06:50:57  swprakt
 * removed unused entries in SFC.lex
 * and removed wrong entry in SFC.cup "stmtblock" in "stmtlist"
 *
 * Revision 1.1  2002/06/25 15:02:51  swprakt
 * missing files added
 *
 * Revision 1.4  2002/06/14 17:51:34  mwe
 * Zweistufiger Ansatz. Benoetigt slime.absynt.absfc.*
 * Leider immer noch keinen regulaeren CVS-Zugang zum CVS.
 * 
 * Revision 1.3  2002/06/11 23:44:10  mwe
 * if statement, non terminals, ...
 *
 * Revision 1.2  2002/05/05 22:24:12  mwe
 * added something from the grammar
 * i think something like slime.absynt.process
 * might be useful. some constructors within
 * slime.absynt.constval have to be added if
 * double/string support is required.
 *
 * Revision 1.1  2002/05/01 11:25:10  mwe
 * first skeleton for the SFC Grammar
 * still some detailed version of the concrete syntax missing
 *
 **/

// --------------------------------------------------------------------------- 

// CUP specification for the SFC Parser
package slime.sfcparser;
import java_cup.runtime.*;
import java_cup.*;
import java.io.*;
import java.util.*;
import java.lang.String;



// --------------------------------------------------------------------------- 

// Preliminaries to set up and use the scanner
// init with {: scanner.init() :}; 
/// executed before parsing see user_init
// scan with {: return getScanner.next_token() :}; 
/// definition of the nextTokenFunction to use

/*
 * <b>CUP: user_init</b>
 * This method is called by the parser prior to asking for the<br>
 * first token from the scanner. The body of this method contains<br>
 * the code from the init with clause of the the specification.<br>
 **/
// public void user_init() {
  // insert initcode here
// } // end of user_init

/*
 * <b>CUP: scan</b>
 * This method encapsulates the scanner and is called each time a
 * new terminal is needed by the parser. The body of this method
 * is supplied by the scan with clause of the specification, if
 * present; otherwise it returns getScanner().next_token().
 **/                                                               
// public java_cup.runtime.Symbol scan() {
//  return getScanner().next_token();
// } // end of scan

// --------------------------------------------------------------------------- 

/**
 * the action code is placed into the action class.
 * it contains methods that can be used within the
 * actions of the defined grammar in the grammar part.
 **/

action code {:

    public LinkedList alist = new LinkedList(); /// a list for gathering the statement objects

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = false;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else if (lineFlag==3) {
		System.out.print( outputString );
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut



    :} // end of Action Code

// --------------------------------------------------------------------------- 


/**
 * the parser code is placed into the parser class
 **/
parser code {:

    SFCLex lexer;

/** 
 * <b> pOut </b>
 * @param java.lang.int lineFlag - determines type of output to Stdout.
 * @param java.lang.String outputString - the ParserOutput which should be displayed
 */
    public void pOut(int lineFlag, java.lang.String outputString) {
	boolean viewOutputOnStdOut = false;
	boolean debug = true;
	if (viewOutputOnStdOut) {
	    if (lineFlag==1) {
		System.out.println( outputString );
	    } else if ( (lineFlag==2) && (debug==true) ) {
		// output even debuglines
		System.out.println( outputString );
	    } else {
		// lineFlag == 0
	    } // end of if-lineFlag
	} else {
	    // show nothing
	} // end of if-viewOutputOnStdOut
    } // end of pOut



/**
 * <b>CUP: report_fatal_error</b><br>
 * This method should be called whenever a non-recoverable error<br>
 * occurs. It responds by calling report_error(), then aborts<br>
 * parsing by calling the parser method done_parsing(), and<br>
 * finally throws an exception. (In general done_parsing() should<br>
 * be called at any point that parsing needs to be terminated early).<br>
 * @param message <b>contains the error message</b><br>
 * @param object <b>the error object</b><br>
 **/
  public void report_fatal_error(String message, Object info) {
      report_error( message, info );
  } // end of report_fatal_error


/**
 * <b>CUP: report_error</b><br>
 * This method should be called whenever an error message is to be<br>
 * issued. In the default implementation of this method, the first<br>
 * parameter provides the text of a message which is printed on<br>
 * System.err and the second parameter is simply ignored. It is<br>
 * very typical to override this method in order to provide a more<br>
 * sophisticated error reporting mechanism.<br>
 * @param message <b>contains the error message</b><br>
 * @param object <b>the error object</b><br>
 * @throws slime.sfcparser.SFCParseException <b>exception for the GUI and therefore UI output</b>
 **/
  public void report_error(String message, Object info) { // not possible in override: throws slime.sfcparser.SFCParseException {
      StringBuffer sbuf = new StringBuffer("SFC Error:");
      if (info instanceof java_cup.runtime.Symbol) {
	  java_cup.runtime.Symbol cupsymbol = ((java_cup.runtime.Symbol) info);
	  if (cupsymbol.left >= 0) {                
                sbuf.append(" in line " + ( cupsymbol.left + 1 ) );   
                if ( cupsymbol.right >= 0 )                    
                    sbuf.append(", at column " + ( cupsymbol.right + 1 ) );
	  } // end if-cupsymbol.left
      } // end if-info
      sbuf.append(" : " + message );
      System.out.println( sbuf.toString() );
      // currently not possible in overridden method: throw new slime.sfcparser.SFCParseException( sbuf.toString() );
  } // end of report_error 
  
/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser as soon as a syntax error<br>
 * is detected (but before error recovery is attempted). In the<br>
 * default implementation it calls: report_error("Syntax error", null);<br>
 * @param Symbol <b>contains the errortoken</b>
 **/
  public void syntax_error(Symbol cur_token) {
      report_error("SYNTAX ERROR", cur_token );
  } // end of syntax_error

  
/**
 * <b>CUP: syntax_error</b><br>
 * This method is called by the parser if it is unable to recover
 * from a syntax error. In the default implementation it calls:
 * report_fatal_error("Couldn't repair and continue parse", null);
 * @param Symbol <b>contains the error token</b>
 **/
  public void unrecovered_syntax_error(Symbol cur_token) {
      done_parsing();       
      report_fatal_error("FATAL PARSING ERROR", cur_token);
  } // end of unrecovered_syntax_error


/*
 * <b>CUP: error_sync_size</b><br>
 * This method is called by the parser to determine how many<br>
 * tokens it must successfully parse in order to consider an error<br>
 * recovery successful. The default implementation returns 3.<br>
 * Values below 2 are not recommended. See the section on<br>
 * error recovery for details.<br>
 * @return 3 <b>the standard size</b>
 **/ 
/*
//  public int error_sync_size() {
//  return 4;
//  } // end of error_sync_size
*/

/** 
 * <b> parseFile </b>
 * @param java.io.File sourcefile - file to parse
 * @return abstract syntax tree with slime.absynt.sfc as root
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.absfc.SFCabtree parseFile(java.io.File sfcfile) throws Exception { // slime.sfcparser.SFCParseException {
	boolean doDebugParse = true;
	FileInputStream FIS = null;
	// Process of parsing a file:
	// create a parsing object
	// SFCParser mySFCParserObj = new SFCParser();
	// open input files, etc. here
	// Symbol myParseTree = null;
  
	// Initialize the Abstract Syntax Tree for the Sequential Function Chart
	slime.absynt.absfc.SFCabtree sfc2 = null;

	try {
	    FIS = new FileInputStream( sfcfile );
	    lexer   = new SFCLex( FIS );
	    setScanner( lexer );
	    if (doDebugParse) {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value;
	    } else {
		sfc2 = (slime.absynt.absfc.SFCabtree)parse().value; 
	    } // end of if-doDebugParse
	} catch (IOException ioe) {
	  throw ioe;
	} catch (Exception e) {
	    throw e;
	} finally {
	    FIS.close();
	} // end of try-catch
	return sfc2;      
    } // end of parseFile


/** 
 * <b> parseExpression </b>
 * @param java.lang.String sfcexpr - Expression to parse <br>
 * @return slime.absynt.Expr - abstract syntax expression <br>
 * @throws SFCParseException <b> if something goes wrong</b>
 **/
    public slime.absynt.Expr parseExpression(java.lang.String sfcexpr) throws SFCParseException {
	slime.absynt.Expr expr = null;
	try {
	    java.io.StringReader isr = new java.io.StringReader( sfcexpr );
	    pOut(1, "Setting Lexer to SFCLex" );
	    lexer = new SFCLex( isr );
	    setScanner( lexer );
	    pOut(1, "Beginning parsing expression" );
	    expr = (slime.absynt.Expr)parse().value;
	    isr.close();
	} catch (Exception le) {
	    System.out.println("Error parsing expression: "+le.toString());
	    throw new slime.sfcparser.SFCParseException("Error parsing expression");
	} // end try catch
	return expr;
    }

    :} // end of ParserCode

// --------------------------------------------------------------------------- 


/// Terminals (tokens returned by the scanner)
terminal DOT, HASH;
terminal String IDENTIFIER;
terminal Integer INTEGER;
terminal ADD, SUB, MUL, DIV, AND, OR, NOT;           // +, -, *, /, MOD=%, &&, ||, !
terminal LPAREN, RPAREN, LPSET, RPSET;                    // (,),{,}
terminal LT, GT, LEQ, GEQ, EQ, NEQ;                       // <,>,<=,>=, =, ==,!=
terminal COMMA, SEMICOLON;                                // ,,;
terminal TRUE, FALSE;                                     // true, false
terminal INTTYPE, BOOLTYPE;                               // int, bool
terminal ASSIGN, SKIP;                                    // =,skip 
terminal SPLIT, JOIN, PROCESS, COMMENT, SFCPRG;           // split, join, process, //, SFCPRG
terminal IF, ELSE, WHILE, INPUT, OUTPUT;                  // if, else, while, input, output
terminal REPEAT, UNTIL;					  // repeat, until


// --------------------------------------------------------------------------- 
/// Non terminals (tokens processed further by the parser)

non terminal    Object                          sfcbegin;

non terminal    slime.absynt.absfc.SFCabtree	sfcprogram;
non terminal 	slime.absynt.Expr		expr; 
non terminal    slime.absynt.Variable		var;
non terminal    slime.absynt.Type		vartype;
non terminal    slime.absynt.Constval		constval;

non terminal    Integer				op;
non terminal    LinkedList			stmtlist;
non terminal    LinkedList                      stmtblock;

non terminal    slime.absynt.absfc.Statement    stmt;
non terminal    slime.absynt.absfc.Statement    stmtatomic;
non terminal    slime.absynt.absfc.StmtAssign	assignment;
non terminal    slime.absynt.absfc.StmtDecl	vardeclaration;
non terminal    slime.absynt.absfc.StmtInput	stmtinput;
non terminal    slime.absynt.absfc.StmtOutput	stmtoutput;
non terminal    slime.absynt.absfc.StmtIf	stmtif;
non terminal    slime.absynt.absfc.StmtIfElse	stmtifelse;
non terminal    slime.absynt.absfc.StmtWhile	stmtloopwhile;
non terminal    slime.absynt.absfc.StmtRepeat	stmtlooprepeat;
non terminal    slime.absynt.absfc.StmtSplit	stmtsplit;
non terminal    slime.absynt.absfc.StmtJoin	stmtjoin;
non terminal    slime.absynt.absfc.Comment	stmtdummy;

non terminal    slime.absynt.absfc.Process	process;
non terminal    LinkedList                      processlist;
non terminal    LinkedList                      procidlist;

/// Precedences and Associativity
precedence right SEMICOLON;				   // end-of-simple-statement
precedence left ADD, SUB;				   // +, -
precedence left MUL, DIV;				   // *,/; MOD=%
precedence left AND, OR, NEQ, LT, LEQ, GT, GEQ, EQ;	   // &&; ||, !=, <,<=,>,>=,==
precedence left NOT;					   // !


// --------------------------------------------------------------------------- 

/// The SFC Grammar:
start with sfcbegin;

/** SFCBEGIN ------------------------------------------------- **/
sfcbegin ::=	sfcprogram:p 
         {:  
	     pOut( 1, "SFC " );
	     RESULT = p;  
	 :}
	|       expr:e       
	 {:	
             RESULT = (slime.absynt.Expr)e;  
	     pOut( 1, "\n was a correct SFC-Expression \n" );	   
	 :}
;

/** SFCPROGRAM ------------------------------------------------- **/
sfcprogram ::=	SFCPRG
                IDENTIFIER:progname
                stmtblock:b 
                {: 
		   pOut( 1, progname+" { // now SFC program begins " );
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)b ); 
		 pOut( 1, " }");
		 :}
	    |	SFCPRG
                IDENTIFIER:progname
		LPSET
                stmt:b1
		SEMICOLON
		stmtlist:b2 
		RPSET
                {: 
		   pOut( 1, progname+" { // now SFC program begins " );
		    java.util.LinkedList blist = new java.util.LinkedList();
		    blist.add(b1);blist.addAll(b2);
		   RESULT=new slime.absynt.absfc.SFCabtree( 
		      progname, (java.util.LinkedList)blist ); 
		 :}
;

/** STMTLIST ------------------------------------------------- **/
stmtlist ::=  stmt:s        
              {:  
	       pOut( 1, " // processing a single stmt of a stmtlist " );
	       LinkedList ll_stmtlist = new LinkedList();
	       ll_stmtlist.addLast( s );
	       RESULT=ll_stmtlist;
	       :} 
           |  stmt:s  
              stmtlist:sl 
              {:  
		  pOut( 1, " // processing the head-stmt of a stmtlist " );
		  LinkedList ll_stmtlist2 = new LinkedList();
		  ll_stmtlist2.addLast( s );
		  ll_stmtlist2.addAll( (java.util.LinkedList) sl );
		  RESULT=ll_stmtlist2;  
	      :}
;

/** STMTBLOCK ------------------------------------------------- **/
stmtblock ::=  LPSET
               stmtlist:l
               RPSET {: 
	           pOut( 1, " { // now being within a block " );
		   RESULT=l; 
		   :} 
            |
	       LPSET
               RPSET 
               {:
	          pOut( 1, " {} // now being within an empty block " );
		   LinkedList ll_stmtblock2 = new LinkedList();
		   ll_stmtblock2.addLast(
		      new slime.absynt.absfc.Comment( "// empty block" ) 
		  );
		  RESULT=ll_stmtblock2;
	       :}
;

/** STMT ------------------------------------------------- **/
stmt ::=
	stmtatomic:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
|	stmtif:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
|	stmtifelse:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
|	stmtloopwhile:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
|	stmtlooprepeat:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
|	stmtsplit:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
|	stmtjoin:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
|	stmtdummy:s {: RESULT = (slime.absynt.absfc.Statement) s ; :}
;

/** STMTATOMIC ------------------------------------------- **/
stmtatomic ::=	vardeclaration:sa {: RESULT = (slime.absynt.absfc.Statement) sa ; :}
|	assignment:sa {: RESULT = (slime.absynt.absfc.Statement) sa ; :}
|	stmtoutput:sa {: RESULT = (slime.absynt.absfc.Statement) sa ; :}
|	stmtinput:sa {: RESULT = (slime.absynt.absfc.Statement) sa ; :}		
;

/** STMTIF ----------------------------------------------- **/
stmtif ::= IF
           LPAREN
           expr:e
           RPAREN
           stmtblock:b 
           {: 
              pOut( 1, " if (expr) { " );
	      RESULT = new slime.absynt.absfc.StmtIf( 
		            e, (java.util.LinkedList)b 
	      ); 
	    :}
;
		
/** STMTIFELSE ------------------------------------------- **/
stmtifelse ::=	IF
                LPAREN  
                expr:e
                RPAREN
                stmtblock:b1 
                ELSE
                stmtblock:b2
                {: 
	          pOut( 1, " if (expr) {b1} else {b2}  " );
		   RESULT = new slime.absynt.absfc.StmtIfElse( 
		             e, 
			     (java.util.LinkedList) b1, 
			     (java.util.LinkedList) b2 
		   );
		 :}
;

/** STMTLOOPWHILE ----------------------------------------------- **/
stmtloopwhile ::= WHILE
                  LPAREN 
                  expr:e 
                  RPAREN  
                  stmtblock:b 
                  {: 
		   // pOut( 1, " while (expr) {b} " );
		     RESULT = new slime.absynt.absfc.StmtWhile( 
			         e, (java.util.LinkedList) b 
		     ); 
		   :}
;

/** STMTLOOPREPEAT ----------------------------------------------- **/
stmtlooprepeat ::= REPEAT
                   stmtblock:b 
                   UNTIL
                   LPAREN
                   expr:e
                   RPAREN 
                   {: pOut( 1, " repeat {b} until (expr) " );
		      RESULT = new slime.absynt.absfc.StmtRepeat( 
			          e, (java.util.LinkedList) b ); 
		    :}
                   SEMICOLON
; 
		
/** STMTOUTPUT ----------------------------------------------- **/
stmtoutput ::=	OUTPUT
                LPAREN
                IDENTIFIER:name
                COMMA
                expr:e
                RPAREN
                SEMICOLON 
                {: 
	           pOut( 1, " output() " );
   		   RESULT = new slime.absynt.absfc.StmtOutput( 
		              new slime.absynt.Variable(name), e ); 
		 :}
;
		
/** STMTINPUT ----------------------------------------------- **/
stmtinput ::=	INPUT
                LPAREN
                IDENTIFIER:name
                COMMA
                expr:e
                RPAREN
                SEMICOLON 
                {: 
	          pOut( 1, " input()  " );
		 RESULT = new slime.absynt.absfc.StmtInput( 
		              new slime.absynt.Variable(name), e ); 
		 :}
;

/** STMTDUMMY ----------------------------------------------- **/
stmtdummy ::=	COMMENT:c 
                {: 
	          pOut( 1, " // comment: "+c );
		   RESULT = new slime.absynt.absfc.Comment( 
		                  (String)c 
		   ); 
		 :}
	    |   SKIP		
	    	SEMICOLON
                {: 
		   RESULT = new slime.absynt.absfc.Comment("nop"); 
		 :}
;

/** ASSIGNMENT ----------------------------------------------- **/
assignment ::=	IDENTIFIER:vname
                ASSIGN
                expr:e
                SEMICOLON
                {: 
	          pOut( 1, " assignment ...  " );
		 RESULT = new slime.absynt.absfc.StmtAssign( 
		     new slime.absynt.Variable(vname), e ); 
		 :}
;

/** VARDECLARATION ------------------------------------------- **/
vardeclaration::= vartype:vtype
                  IDENTIFIER:vname
                  SEMICOLON 
                  {: 
	  	          pOut( 1, " declaration " );
		   RESULT = new slime.absynt.absfc.StmtDecl( 
		                new slime.absynt.Variable(vname), 
				vtype ); 
		   :} 
               |  vartype:vtype
	          IDENTIFIER:vname
	          ASSIGN
	          expr:e
	          SEMICOLON 
                  {: 
		      pOut( 1, " declaration " );
		      RESULT = new slime.absynt.absfc.StmtDecl( 
			           new slime.absynt.Variable(vname), 
				   vtype, e );  
                      // bei vartype evtl. non term aendern
		      // falls fuer den checker der echte Type
		      // verlorengeht. Ansonsten in der Absynt
		      // den Typ durch Klassenattribut "merken"
		   :} 		
;

/** STMTSPLIT ----------------------------------------------- **/
stmtsplit ::= 	SPLIT 
                LPSET
                processlist:pl
                RPSET 
                {: 
	          pOut( 1, " split  " );
		    RESULT = new slime.absynt.absfc.StmtSplit(
			       (java.util.LinkedList) pl 
		    ); 
		 :}
;

/** STMTJOIN ----------------------------------------------- **/
stmtjoin ::=	JOIN
                LPAREN
                procidlist:pidl
                RPAREN 
                {: 
	          pOut( 1, " join  " );
		   RESULT = new slime.absynt.absfc.StmtJoin( 
		               (java.util.LinkedList) pidl 
		   ); 
		 :}
;

/** PROCODLIST -------------------------------------------- **/
procidlist ::=	IDENTIFIER:procname 
                {: 
		   LinkedList ll_procidlist = new LinkedList();
		   ll_procidlist.addLast( procname );
		   RESULT=ll_procidlist; 
		 :}
              |	IDENTIFIER:procname
	        procidlist:proclist
                {: 
		   LinkedList ll_procidlist2 = new LinkedList();
		   ll_procidlist2.addLast( procname );
		   ll_procidlist2.addAll( (java.util.LinkedList) proclist );
		   RESULT=ll_procidlist2; 
		 :}
;

/** PROCESSLIST ------------------------------------------ **/
processlist ::=	process:p1 
                {: 
		   LinkedList ll_processlist = new LinkedList();
		   ll_processlist.addLast( p1 );
		   RESULT = ll_processlist; 
		 :} 
              |	process:p 
	        processlist:pl 
                {: 
		    LinkedList ll_processlist2 = new LinkedList();
		    ll_processlist2.addLast( p );
		    ll_processlist2.addAll( (java.util.LinkedList) pl );
		    RESULT = ll_processlist2;
		 :}
;
		
/** PROCESS ---------------------------------------------- **/
process ::= PROCESS
            IDENTIFIER:name
            stmtblock:b
            {: 
	       RESULT= new slime.absynt.absfc.Process( 
		            name, (java.util.LinkedList) b
	       ); 
	     :}
;
		
/** VARTYPE ---------------------------------------------- **/
vartype ::= INTTYPE    {: RESULT = new slime.absynt.IntType(); :} 
        |   BOOLTYPE   {: RESULT = new slime.absynt.BoolType(); :} 
;

/** OP --------------------------------------------------- **/
op ::=
  ADD {: pOut(3," + ") ;
       java.lang.Integer opCode = new java.lang.Integer(0);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  0 PLUS
| MUL {: pOut(3," * ") ;
       java.lang.Integer opCode = new java.lang.Integer(2);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  2 TIMES
| SUB {: pOut(3," - ") ;
       java.lang.Integer opCode = new java.lang.Integer(1);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  1 MINUS
| DIV {: pOut(3," / ") ;
       java.lang.Integer opCode = new java.lang.Integer(3);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  3 DIV

| AND {: pOut(3," && ");
       java.lang.Integer opCode = new java.lang.Integer(4);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  4 AND

|  OR {: pOut(3," || ");
       java.lang.Integer opCode = new java.lang.Integer(5);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  5 OR

| NOT {: pOut(3," ! ") ;
       java.lang.Integer opCode = new java.lang.Integer(6);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  6 NEG

|  EQ {: pOut(3," == ");
       java.lang.Integer opCode = new java.lang.Integer(7);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  7 EQ

|  LT {: pOut(3," < ") ;
       java.lang.Integer opCode = new java.lang.Integer(8);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  8 LESS

|  GT {: pOut(3," > ") ;
       java.lang.Integer opCode = new java.lang.Integer(9);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  9 GREATER

| LEQ {: pOut(3," <= ");
       java.lang.Integer opCode = new java.lang.Integer(10);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  10 LEQ

| GEQ {: pOut(3," >= ");
       java.lang.Integer opCode = new java.lang.Integer(11);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  11 GEQ

| NEQ {: pOut(3," != ");
       java.lang.Integer opCode = new java.lang.Integer(12);
       int opCodeValue = opCode.intValue();
       RESULT=opCode; :}  ///  12 NEQ
;

/** VAR ---------------------------------------------- **/
var ::= 

IDENTIFIER:v
{: pOut( 3, v ); RESULT = new slime.absynt.Variable( v ); :}

;

/** CONSTVAL ---------------------------------------------- **/
constval ::=

TRUE 
{:  pOut( 3, "true"); RESULT = new slime.absynt.Constval( true );  :}

|

FALSE
{:  
    pOut( 3, "false" ); 
    RESULT = new slime.absynt.Constval( false );  :}

|  

INTEGER:i 
{:  
    pOut( 3, i.toString() ); 
    java.lang.Integer opCode = i;
    int opCodeValue = opCode.intValue();
    //System.out.println("before constval-INTEGER-RESULT");
    slime.absynt.Constval cint = new slime.absynt.Constval( opCodeValue );
    //System.out.println("after constval-INTEGER-Constval");
    RESULT = cint;  
    //System.out.println("after constval-INTEGER-RESULT");
:}

;


/** EXPR -------------------------------------------------- **/
expr ::= 
LPAREN 
expr:e 
RPAREN        
{: pOut( 3, " ( " ); 
RESULT = e; 
pOut( 3, " ) " ); :} // expression with outer parenthesis

|

expr:l 
op:o 
expr:r        
{: 
    java.lang.Integer opCode = o;
    int opCodeValue = opCode.intValue();
    RESULT = new slime.absynt.B_expr( l, opCodeValue, r ); 
:} // binary expression

|

op:o 
expr:e        
{:  
    java.lang.Integer opCode = o;
    int opCodeValue = opCode.intValue();
    RESULT = new slime.absynt.U_expr( opCodeValue, e);
:} // unary expression

|

var:v         
{: RESULT = v; :} // variable

|

constval:cv	
{: RESULT = cv; :} // constant value

;













