
/**
 * Grammar (yacc) definition of the Expressions in SFC/SAP's.
 * Offers the methods parseExpr 
 *
 * @author Karsten Stahl, Martin Steffen
 * @version $Id: Expr.cup,v 1.6 2002-07-05 16:05:50 swprakt Exp $
 *
 * The grammar definition contains 4 parts:
 *    -  initialization declarations and how to generate the parser
 *    -  declaration of terminals and non-terminals
 *    -  precedence, associativity
 *    -  grammar proper
 **/



/*  ---- Preliminaries to set up and use the scanner.  ---- */


package slime.utils;

import java_cup.runtime.*;
import java.lang.String;
import slime.absynt.*;
import slime.utils.*;
import java.util.*;
import java.io.*;


/**
* The following 4 (optional) entries are for user-code insertions to the generated parser:
*   - init:   executed before start parsing
*   - scan:   how the parser asks for the next token
*   - action: code will be placed in the action class. Used as auxiliary
*             routines usable in the actions of the grammar.
*   - parser: code will be _directly_ placed in the parser class
**/


// init with {: io.scanner.init(); :}; 
// scan with {: return scanner.next_token(); :};  // equivalent to the default
// action code {: :}


// ---------------------------------------------------------------------------

parser code {:
  Yylex lexer;

  public void report_fatal_error(String message, Object info) throws ParseException{
    System.err.println(message);
    throw new ParseException(message);
  }
  
  public void report_error(String message, Object info){
    System.err.println("[modul parser2] "+message);
  }
  
  public void syntax_error(Symbol cur_token){
    report_error("Syntax error! current symbol: "+cur_token, null);
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) throws ParseException{
    done_parsing();       
    report_fatal_error("[module parser2] fatal parsing error", null);
  }


   /** 
    * public methods to parse a string
    *
    * @parameter 
    * _sap - string to parse
    * @optional
    * _decl, _sfc - declaration list or sfc to use already given variables
    * @return 
    * abstract syntax tree with slime.absynt.sfc as root
    * @throws 
    * java.Exception when broken.
    */

  public slime.absynt.Expr parseExpr(java.lang.String _e) throws Exception {
    lexer   = new Yylex(new StringReader(_e));
    setScanner(lexer);
    slime.absynt.Expr e = (slime.absynt.Expr)parse().value;
    return e;
  };

  :}


/* ------ Declaration of terminals and non-terminals ----- */
/** 
 * The choice of names for the non-terminals is directly inspired
 * byte the extended abstract grammar.
 */ 
terminal         ASSIGN;
terminal         LPAREN, RPAREN, COMMA, SEM, COLON;
terminal         SKIP;
terminal         INT, BOOL, NEQ, OR, PLUS, TIMES;
terminal         AND, DIV, EQ, GEQ, GREATER, LEQ, LESS, MINUS, NEG;
terminal         TRUE, FALSE;
terminal         IN, OUT, INOUT;

terminal String  IDENT;
terminal Integer INTEGER;

non terminal    slime.absynt.Constval   constval;
non terminal    LinkedList        sap;
non terminal    slime.absynt.Stmt       stmt;
non terminal    slime.absynt.Assign     assign;
non terminal    slime.absynt.Expr       expr;
non terminal    slime.absynt.Variable   var;
non terminal    Integer           op;    // int does not work! RESULT must be an object


/* ---        precedences and associativity ------- */


precedence left AND, OR, NEQ, LESS, LEQ, GREATER, GEQ, EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left NEG;


/* -----      The grammar proper ----------------- */
start with expr;




/** 
 * Produktion:
 * Program   ::= "program" IDENT "[" "]" ""
 **/



expr ::=
|  PLUS     expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.PLUS,e); :}
|  MINUS    expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.MINUS,e); :}
|  TIMES    expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.TIMES,e); :}
|  DIV      expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.DIV,e); :}
|  AND      expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.AND,e); :}
|  OR       expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.OR,e); :}
|  NEG      expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.NEG,e); :}
|  LESS     expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.LESS,e); :}
|  GREATER  expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.GREATER,e); :}
|  LEQ      expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.LEQ,e); :}
|  GEQ      expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.GEQ,e); :}
|  EQ       expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.EQ,e); :}
|  NEQ      expr:e {: RESULT = new slime.absynt.U_expr(slime.absynt.Expr.NEQ,e); :}
|  expr:e1 PLUS     expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.PLUS,e2); :}
|  expr:e1 MINUS    expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.MINUS,e2); :}
|  expr:e1 TIMES    expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.TIMES,e2); :}
|  expr:e1 DIV      expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.DIV,e2); :}
|  expr:e1 AND      expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.AND,e2); :}
|  expr:e1 OR       expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.OR,e2); :}
|  expr:e1 NEG      expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.NEG,e2); :}
|  expr:e1 LESS     expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.LESS,e2); :}
|  expr:e1 GREATER  expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.GREATER,e2); :}
|  expr:e1 LEQ      expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.LEQ,e2); :}
|  expr:e1 GEQ      expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.GEQ,e2); :}
|  expr:e1 EQ       expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.EQ,e2); :}
|  expr:e1 NEQ      expr:e2 {: RESULT = new slime.absynt.B_expr(e1,slime.absynt.Expr.NEQ,e2); :}
|  LPAREN expr:e RPAREN  {: RESULT = e; :}
|  var:v       {: RESULT = v; :}
| constval:v   {: RESULT = v; :}
  ;


var             ::= IDENT:v
                     {: RESULT = new slime.absynt.Variable(v); :}
  ;

constval        ::= TRUE 
                    {:  RESULT = new slime.absynt.Constval(true);  :}
                 |  FALSE
                    {:  RESULT = new slime.absynt.Constval(false);  :}
                 |  INTEGER:i 
                    {:  RESULT = new slime.absynt.Constval(i.intValue());  :}
  ;

